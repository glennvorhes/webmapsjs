"use strict";
var provide_1 = require("../util/provide");
var nm = provide_1.default('domUtil');
var mouseIn = false;
var mouseDown = false;
var timeout = null;
var dragged = false;
var lastVal;
/**
 * Created by gavorhes on 11/2/2015.
 */
function triggerCallback(callback, evt) {
    "use strict";
    var val = parseFloat(this.value);
    var min = parseFloat(this.min);
    var max = parseFloat(this.max);
    var step = parseFloat(this.step);
    if (max - val < step) {
        val = max;
    }
    var percent = (val - min) / (max - min);
    if (typeof lastVal == 'number' && val == lastVal) {
        return;
    }
    lastVal = val;
    callback(val, percent, evt);
}
/**
 * Add a variety of listeners for range inputs applied to a common callback
 * @param  $slider - jquery reference to the slider
 * @param {rangeChangeCallback} callback - the callback
 * @param {number} [changeTimeout=75] before the callback is called
 * @this {jQuery}
 * @returns {jQuery} the jQuery object
 */
function rangeChange($slider, callback, changeTimeout) {
    changeTimeout = typeof changeTimeout == 'number' ? changeTimeout : 75;
    $slider.mouseenter(function () {
        mouseIn = true;
    });
    $slider.mouseleave(function () {
        mouseIn = false;
        mouseDown = false;
    });
    $slider.mousedown(function () {
        mouseDown = true;
    });
    $slider.mouseup(function () {
        mouseDown = false;
    });
    $slider.mousemove(
    /**
     *
     * @param {object} evt - event properties
     * @this {HTMLElement}
     */
    function (evt) {
        if (!(mouseIn && mouseDown)) {
            return;
        }
        dragged = true;
        if (lastVal == this['value']) {
            return;
        }
        lastVal = this['value'];
        if (timeout != null) {
            clearTimeout(timeout);
        }
        var _this = this;
        timeout = setTimeout(function () {
            triggerCallback.call(_this, callback, evt);
            timeout = null;
        }, changeTimeout);
    });
    $slider.keyup(
    /**
     *
     * @param {object} evt - event properties
     */
    function (evt) {
        if (evt.keyCode == 37 || evt.keyCode == 39) {
            triggerCallback.call(this, callback, evt);
        }
    });
    $slider.change(function (evt) {
        if (dragged) {
            dragged = false;
            return;
        }
        triggerCallback.call(this, callback, evt);
    });
    return this;
}
exports.rangeChange = rangeChange;
nm.rangeChange = rangeChange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UtY2hhbmdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RvbVV0aWwvcmFuZ2UtY2hhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQ0FBc0M7QUFHdEMsSUFBTSxFQUFFLEdBQUcsaUJBQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUU5QixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDcEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztBQUNuQixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDcEIsSUFBSSxPQUFPLENBQUM7QUF5Qlo7O0dBRUc7QUFFSCx5QkFBeUIsUUFBOEIsRUFBRSxHQUFHO0lBQ3hELFlBQVksQ0FBQztJQUViLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFakMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQSxDQUFDO1FBQ2xCLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxPQUFPLEdBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFFekMsRUFBRSxDQUFDLENBQUMsT0FBTyxPQUFPLElBQUksUUFBUSxJQUFJLEdBQUcsSUFBSyxPQUFPLENBQUMsQ0FBQSxDQUFDO1FBQy9DLE1BQU0sQ0FBQztJQUNYLENBQUM7SUFDRCxPQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ2QsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUlEOzs7Ozs7O0dBT0c7QUFDSCxxQkFBNkIsT0FBZSxFQUFFLFFBQThCLEVBQUUsYUFBcUI7SUFFL0YsYUFBYSxHQUFHLE9BQVEsYUFBYSxJQUFJLFFBQVEsR0FBRyxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBRXZFLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDZixPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUNmLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDZCxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNaLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsU0FBUztJQUNiOzs7O09BSUc7SUFDSCxVQUFVLEdBQUc7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUM7UUFDWCxDQUFDO1FBRUQsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVmLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBRUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWpCLE9BQU8sR0FBRyxVQUFVLENBQUM7WUFDakIsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFFbkIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEtBQUs7SUFDVDs7O09BR0c7SUFDSCxVQUFVLEdBQUc7UUFDYixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDVixPQUFPLEdBQUcsS0FBSyxDQUFDO1lBRWhCLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFDRCxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUF6RUQsa0NBeUVDO0FBRUQsRUFBRSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcHJvdmlkZSBmcm9tICcuLi91dGlsL3Byb3ZpZGUnO1xyXG5pbXBvcnQgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5cclxuY29uc3Qgbm0gPSBwcm92aWRlKCdkb21VdGlsJyk7XHJcblxyXG5sZXQgbW91c2VJbiA9IGZhbHNlO1xyXG5sZXQgbW91c2VEb3duID0gZmFsc2U7XHJcbmxldCB0aW1lb3V0ID0gbnVsbDtcclxubGV0IGRyYWdnZWQgPSBmYWxzZTtcclxubGV0IGxhc3RWYWw7XHJcblxyXG5cclxuLyoqXHJcbiAqIGNhbGxiYWNrIG9uIHJhbmdlIGNoYW5nZSBpbnRlcmFjdGlvbiwgY29udGV4dCBvZiB0aGlzIGlzIHRoZSBmaXJpbmcgZG9tIGVsZW1lbnRcclxuICogQGNhbGxiYWNrIHJhbmdlQ2hhbmdlQ2FsbGJhY2tcclxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1ZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYXRpbyB2YWx1ZSBmcm9tIDAgdG8gMSByZWxhdGl2ZSBvZiB0aGUgdmFsdWUgdG8gdGhlIG1pbiBhbmQgbWF4XHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBldnRcclxuICovXHJcblxyXG4vKioqXHJcbiAqIGNhbGxiYWNrIGZ1bmNpb24gYWZ0ZXIgdGhlIHNsaWRlciBoYXMgYmVlbiBtb3ZlZFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSByYW5nZUNoYW5nZWRDYWxsYmFja3tcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuZXdWYWx1ZSBuZXcgdmFsdWUgb2YgdGhlIHNsaWRlclxyXG4gICAgICogQHBhcmFtIHJhdGlvIHJhdGlvIGZyb20gbG93IHRvIGhpZ2gsIDAgdG8gMVxyXG4gICAgICogQHBhcmFtIGV2dCB0aGUgb3JpZ2luYWwgZXZlbnRcclxuICAgICAqL1xyXG4gICAgKG5ld1ZhbHVlOiBudW1iZXIsIHJhdGlvOiBudW1iZXIsIGV2dDogRXZlbnQpOiBhbnlcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDExLzIvMjAxNS5cclxuICovXHJcblxyXG5mdW5jdGlvbiB0cmlnZ2VyQ2FsbGJhY2soY2FsbGJhY2s6IHJhbmdlQ2hhbmdlZENhbGxiYWNrLCBldnQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGxldCB2YWwgPSBwYXJzZUZsb2F0KHRoaXMudmFsdWUpO1xyXG4gICAgbGV0IG1pbiA9IHBhcnNlRmxvYXQodGhpcy5taW4pO1xyXG4gICAgbGV0IG1heCA9IHBhcnNlRmxvYXQodGhpcy5tYXgpO1xyXG4gICAgbGV0IHN0ZXAgPSBwYXJzZUZsb2F0KHRoaXMuc3RlcCk7XHJcblxyXG4gICAgaWYgKG1heCAtIHZhbCA8IHN0ZXApe1xyXG4gICAgICAgIHZhbCA9IG1heDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGVyY2VudCA9ICAodmFsIC0gbWluKSAvIChtYXggLSBtaW4pO1xyXG5cclxuICAgIGlmICh0eXBlb2YgbGFzdFZhbCA9PSAnbnVtYmVyJyAmJiB2YWwgPT0gIGxhc3RWYWwpe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxhc3RWYWwgPSB2YWw7XHJcbiAgICBjYWxsYmFjayh2YWwsIHBlcmNlbnQsIGV2dCk7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEFkZCBhIHZhcmlldHkgb2YgbGlzdGVuZXJzIGZvciByYW5nZSBpbnB1dHMgYXBwbGllZCB0byBhIGNvbW1vbiBjYWxsYmFja1xyXG4gKiBAcGFyYW0gICRzbGlkZXIgLSBqcXVlcnkgcmVmZXJlbmNlIHRvIHRoZSBzbGlkZXJcclxuICogQHBhcmFtIHtyYW5nZUNoYW5nZUNhbGxiYWNrfSBjYWxsYmFjayAtIHRoZSBjYWxsYmFja1xyXG4gKiBAcGFyYW0ge251bWJlcn0gW2NoYW5nZVRpbWVvdXQ9NzVdIGJlZm9yZSB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkXHJcbiAqIEB0aGlzIHtqUXVlcnl9XHJcbiAqIEByZXR1cm5zIHtqUXVlcnl9IHRoZSBqUXVlcnkgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2VDaGFuZ2UgKCRzbGlkZXI6IEpRdWVyeSwgY2FsbGJhY2s6IHJhbmdlQ2hhbmdlZENhbGxiYWNrLCBjaGFuZ2VUaW1lb3V0OiBudW1iZXIpIHtcclxuXHJcbiAgICBjaGFuZ2VUaW1lb3V0ID0gdHlwZW9mICBjaGFuZ2VUaW1lb3V0ID09ICdudW1iZXInID8gY2hhbmdlVGltZW91dCA6IDc1O1xyXG5cclxuICAgICRzbGlkZXIubW91c2VlbnRlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbW91c2VJbiA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2xpZGVyLm1vdXNlbGVhdmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG1vdXNlSW4gPSBmYWxzZTtcclxuICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzbGlkZXIubW91c2Vkb3duKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNsaWRlci5tb3VzZXVwKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzbGlkZXIubW91c2Vtb3ZlKFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGV2dCAtIGV2ZW50IHByb3BlcnRpZXNcclxuICAgICAgICAgKiBAdGhpcyB7SFRNTEVsZW1lbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIGlmICghKG1vdXNlSW4gJiYgbW91c2VEb3duKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcmFnZ2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKGxhc3RWYWwgPT0gdGhpc1sndmFsdWUnXSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RWYWwgPSB0aGlzWyd2YWx1ZSddO1xyXG5cclxuICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdHJpZ2dlckNhbGxiYWNrLmNhbGwoX3RoaXMsIGNhbGxiYWNrLCBldnQpO1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgfSwgY2hhbmdlVGltZW91dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2xpZGVyLmtleXVwKFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGV2dCAtIGV2ZW50IHByb3BlcnRpZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgaWYgKGV2dC5rZXlDb2RlID09IDM3IHx8IGV2dC5rZXlDb2RlID09IDM5KSB7XHJcbiAgICAgICAgICAgIHRyaWdnZXJDYWxsYmFjay5jYWxsKHRoaXMsIGNhbGxiYWNrLCBldnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICRzbGlkZXIuY2hhbmdlKGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICBpZiAoZHJhZ2dlZCkge1xyXG4gICAgICAgICAgICBkcmFnZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyaWdnZXJDYWxsYmFjay5jYWxsKHRoaXMsIGNhbGxiYWNrLCBldnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuXHJcbm5tLnJhbmdlQ2hhbmdlID0gcmFuZ2VDaGFuZ2U7XHJcblxyXG4iXX0=