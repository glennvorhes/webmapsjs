{"version":3,"file":"npmrds.js","sourceRoot":"","sources":["../../src/api/npmrds.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by glenn on 6/13/2017.\r\n */\r\n\r\nimport $ = require('jquery');\r\nimport * as ajx from './axios';\r\nimport {iExtent, iGetRoads, iError, iGeometry, iRoute} from './_npmrdsInterfaces';\r\nimport * as empty from './_npmrdsEmpty'\r\nimport {apiRoot} from './host';\r\n\r\nexport const npmrdsApiUrl = apiRoot + '/npmrds';\r\n\r\n\r\n\r\n\r\n\r\nfunction _abortHelper(x: XMLHttpRequest) {\r\n    if (x && x['abort']) {\r\n        x.abort();\r\n    }\r\n}\r\n\r\nfunction makeExtent(ext: iExtent): string {\r\n    if (!ext) {\r\n        return null;\r\n    }\r\n\r\n    if (ext.coordinates) {\r\n        if (ext.coordinates.length < 4) {\r\n            throw \"npmrds api: coordinate array must have at least 3 vertices, last one closing\";\r\n        }\r\n        return JSON.stringify(ext.coordinates);\r\n    } else if (ext.bottom && ext.top && ext.left && ext.right) {\r\n        let bottom_left = [ext.left, ext.bottom];\r\n        let ext_arr = [bottom_left];\r\n        ext_arr.push([ext.left, ext.top]);\r\n        ext_arr.push([ext.right, ext.top]);\r\n        ext_arr.push([ext.right, ext.bottom]);\r\n        ext_arr.push(bottom_left);\r\n        return JSON.stringify(ext_arr);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n\r\nexport function getRoads(extent: iExtent,\r\n                         version: number,\r\n                         callback: (d: iGetRoads) => any,\r\n                         error: (e: iError) => any = () => {\r\n                         }) {\r\n\r\n    let ext = makeExtent(extent);\r\n\r\n    if (ext == null) {\r\n        callback({roads: []})\r\n    } else if (ext) {\r\n        let params = {extent: makeExtent(extent), version: version};\r\n        ajx.get(npmrdsApiUrl + '/roads', (d: iGetRoads | iError) => {\r\n            if ((d as iError).error) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d as iGetRoads)\r\n            }\r\n\r\n        }, params, error);\r\n    } else {\r\n        error({error: \"invalid extent\"})\r\n    }\r\n}\r\n\r\n\r\nexport function getGeometry(extent: iExtent, version: number,\r\n                            callback: (d: iGeometry) => any,\r\n                            options: {\r\n                                roadDirection?: { road: string, direction: string },\r\n                                startEnd?: { start: string, end: string }\r\n                            } = {},\r\n                            error: (e: iError) => any = () => {\r\n                            }) {\r\n\r\n    let ext = makeExtent(extent);\r\n\r\n    if (ext == null) {\r\n        callback(empty.emptyGeometry);\r\n    } else if (typeof ext == 'undefined') {\r\n        error({error: \"Invalid Extent\"});\r\n    } else {\r\n        let params = {extent: ext, version: version};\r\n        if (options.roadDirection) {\r\n            params['road'] = options.roadDirection.road;\r\n            params['direction'] = options.roadDirection.direction;\r\n        }\r\n\r\n        if (options.startEnd) {\r\n            params['start'] = options.startEnd.start;\r\n            params['end'] = options.startEnd.end;\r\n        }\r\n\r\n        ajx.get(npmrdsApiUrl + '/geometry', (d: iGeometry | iError) => {\r\n            if ((d as iError).error) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d as iGeometry)\r\n            }\r\n        }, params, error);\r\n    }\r\n}\r\n\r\nexport function getRoute(road: string, direction: string, version: number,\r\n                         callback: (d: iRoute) => any,\r\n                         options: {\r\n                             extent?: iExtent,\r\n                             startEnd?: { start: string, end: string },\r\n                             version?: number\r\n                         } = {},\r\n                         error: (e: iError) => any = () => {\r\n                         }) {\r\n\r\n    let params = {road: road, direction: direction, version: version};\r\n\r\n    let ext;\r\n\r\n    if (options.extent) {\r\n        ext = makeExtent(options.extent);\r\n\r\n        if (ext == null) {\r\n            callback(empty.emptyRoute);\r\n            return;\r\n        } else if (typeof ext == 'undefined') {\r\n            error({error: \"Invalid Extent\"});\r\n            return;\r\n        }\r\n    }\r\n\r\n    if (ext) {\r\n        params['extent'] = ext;\r\n    }\r\n\r\n    if (options.startEnd) {\r\n        params['start'] = options.startEnd.start;\r\n        params['end'] = options.startEnd.end;\r\n    }\r\n\r\n    ajx.get(npmrdsApiUrl + '/route', (d: iRoute | iError) => {\r\n        if ((d as iError).error) {\r\n            error(d as iError)\r\n        } else {\r\n            callback(d as iRoute)\r\n        }\r\n    }, params, error);\r\n}\r\n\r\nexport function getTmcs(lon: number, lat: number, version: number, searchDist: number = 2000,\r\n                        callback: (d) => any,\r\n                        error: (e: iError) => any = () => {\r\n                        }) {\r\n\r\n    let params = {lon: lon, lat: lat, version: version, search: searchDist};\r\n\r\n    ajx.get(npmrdsApiUrl + '/tmcs', (d: iGeometry | iError) => {\r\n        if ((d as iError).error) {\r\n            error(d as iError)\r\n        } else {\r\n            callback(d)\r\n        }\r\n    }, params, error);\r\n}\r\n\r\n\r\nexport function getTmc(tmc: string, version: number,\r\n                        callback: (d) => any,\r\n                        error: (e: iError) => any = () => {\r\n                        }) {\r\n    let params = {tmc: tmc, version: version};\r\n\r\n    ajx.get(npmrdsApiUrl + '/tmc', (d: iGeometry | iError) => {\r\n        if ((d as iError).error) {\r\n            error(d as iError)\r\n        } else {\r\n            callback(d)\r\n        }\r\n    }, params, error);\r\n}\r\n"]}