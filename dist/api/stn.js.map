{"version":3,"file":"stn.js","sourceRoot":"","sources":["../../src/api/stn.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by glenn on 6/13/2017.\r\n */\r\n\r\nimport * as ajx from './axios';\r\nimport {apiRoot} from './host';\r\n\r\nexport const stnApiUrl = apiRoot + '/stn';\r\n\r\nfunction _abortHelper(x: XMLHttpRequest) {\r\n    if (x && x['abort']) {\r\n        x.abort();\r\n    }\r\n}\r\n\r\nexport interface iError {\r\n    error?: string;\r\n}\r\n\r\nexport interface iRoutes extends iError {\r\n    routes: { [s: string]: number }\r\n}\r\n\r\nexport interface iGeoFeature {\r\n    type: string;\r\n    geometry: Object;\r\n    properties: Object;\r\n}\r\n\r\nexport interface iSnappedPoint {\r\n    type: string;\r\n    geometry: {\r\n        type: string;\r\n        coordinates: [number, number]\r\n    },\r\n    properties: {\r\n        cumtMilg: number;\r\n        dtLinkCurr: string;\r\n        dtOpnTrfc: string;\r\n        dtTrxHstl: string;\r\n        editIndc: number;\r\n        lcmCkotTxnId: number;\r\n        lcmDtHstl: number;\r\n        lcmDtTxnCurr: string;\r\n        lcmFromToDis: number;\r\n        lcmStus: number;\r\n        lnkOffsetMi: number;\r\n        lnkOffsetPcnt: number;\r\n        rdwyLinkId: number;\r\n        refSiteFromId: number;\r\n        refSiteToId: number;\r\n        routeIds: number[];\r\n        year: number;\r\n    }\r\n}\r\n\r\nexport interface iStnSegment {\r\n    type: string;\r\n    geometry: {\r\n        type: string;\r\n        coordinates: Array<number[]>\r\n    },\r\n    properties: {\r\n        cumtMilgEnd: number;\r\n        cumtMilgStart: number;\r\n        offsetMiEnd: number;\r\n        offsetMiStart: number;\r\n        offsetPcntEnd: number;\r\n        offsetPcntStart: number;\r\n        rdwyLinkIdEnd: number;\r\n        rdwyLinkIdStart: number;\r\n        rdwyLinkIds: number[];\r\n        rdwyRteId: number;\r\n        year: number;\r\n    }\r\n}\r\n\r\nexport interface _iGeoJson {\r\n    type: string;\r\n    crs: {\r\n        type: string;\r\n        properties: {\r\n            name: string;\r\n        }\r\n    };\r\n    features: any[];\r\n}\r\n\r\nexport interface iGeoJsonSnappedPoint extends _iGeoJson {\r\n    features: iSnappedPoint[];\r\n}\r\n\r\nexport interface iGeoJsonStnSegment extends _iGeoJson {\r\n    features: iStnSegment[];\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {number} yr\r\n * @param {number} lon\r\n * @param {number} lat\r\n * @param {number} searchDistance\r\n * @param {(d: iRoutes) => any} callback\r\n * @param {(e: iError) => any} error\r\n */\r\nexport function getRoutes(yr: number,\r\n                          lon: number,\r\n                          lat: number,\r\n                          searchDistance: number = 200,\r\n                          callback: (d: iRoutes) => any = (d) => {\r\n                              console.log(d);\r\n                          },\r\n                          error: (e: iError) => any = (e) => {\r\n                              console.log(e);\r\n                          }) {\r\n\r\n    ajx.get(stnApiUrl + '/routes', (d: iRoutes) => {\r\n            if (d.error) {\r\n                error(d)\r\n            } else {\r\n                callback(d)\r\n            }\r\n\r\n        },\r\n        {\r\n            year: yr,\r\n            lon: lon,\r\n            lat: lat,\r\n            distance: searchDistance\r\n        },\r\n        error\r\n    );\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} yr\r\n * @param {number} routeId\r\n * @param {number} lon\r\n * @param {number} lat\r\n * @param {number} searchDistance\r\n * @param {(d) => any} callback\r\n * @param {(e: iError) => any} error\r\n */\r\nexport function getSnappedPoint(yr: number,\r\n                                routeId: number,\r\n                                lon: number,\r\n                                lat: number,\r\n                                searchDistance: number = 200,\r\n                                callback: (d: iGeoJsonSnappedPoint) => any = (d: iGeoJsonSnappedPoint) => {\r\n                                    console.log(d);\r\n                                },\r\n                                error: (e: iError) => any = (e) => {\r\n                                    console.log(e);\r\n                                }) {\r\n\r\n    ajx.get(stnApiUrl + '/snapped', (d: iGeoJsonSnappedPoint) => {\r\n            if (d['error']) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d)\r\n            }\r\n        },\r\n        {\r\n            year: yr,\r\n            route: routeId,\r\n            lon: lon,\r\n            lat: lat,\r\n            distance: searchDistance\r\n        },\r\n        error\r\n    );\r\n}\r\n\r\n/**\r\n *\r\n * @param {number} yr\r\n * @param {number} routeId\r\n * @param {number} lonStart\r\n * @param {number} latStart\r\n * @param {number} lonEnd\r\n * @param {number} latEnd\r\n * @param {number} searchDistance\r\n * @param {(d) => any} callback\r\n * @param {(e: iError) => any} error\r\n */\r\nexport function getStnSegment(yr: number,\r\n                              routeId: number,\r\n                              lonStart: number,\r\n                              latStart: number,\r\n                              lonEnd: number,\r\n                              latEnd: number,\r\n                              searchDistance: number = 200,\r\n                              callback: (d: iGeoJsonStnSegment) => any = (d: iGeoJsonStnSegment) => {\r\n                                  console.log(d);\r\n                              },\r\n                              error: (e: iError) => any = (e) => {\r\n                                  console.log(e);\r\n                              }) {\r\n\r\n    ajx.get(stnApiUrl + '/segment', (d: iGeoJsonStnSegment) => {\r\n            if (d['error']) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d)\r\n            }\r\n        },\r\n        {\r\n            year: yr,\r\n            route: routeId,\r\n            lonStart: lonStart,\r\n            latStart: latStart,\r\n            lonEnd: lonEnd,\r\n            latEnd: latEnd,\r\n            distance: searchDistance\r\n        },\r\n        error\r\n    );\r\n}\r\n\r\n\r\nexport function getStnSegmentByMiles(\r\n    yr: number,\r\n    routeId: number,\r\n    startMile: number,\r\n    endMile: number,\r\n    callback: (d: iGeoJsonStnSegment) => any = (d: iGeoJsonStnSegment) => {\r\n        console.log(d);\r\n    },\r\n    error: (e: iError) => any = (e) => {\r\n        console.log(e);\r\n    }) {\r\n\r\n    ajx.get(stnApiUrl + '/segment', (d: iGeoJsonStnSegment) => {\r\n            if (d['error']) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d)\r\n            }\r\n        },\r\n        {\r\n            year: yr,\r\n            route: routeId,\r\n            startMile: startMile,\r\n            endMile: endMile\r\n        },\r\n        error\r\n    );\r\n}\r\n\r\nexport function getStnYears(\r\n    callback: (d: { years: number[] }) => any = (d: { years: number[] }) => {\r\n        console.log(d);\r\n    },\r\n    error: (e: iError) => any = (e) => {\r\n        console.log(e);\r\n    }) {\r\n\r\n    ajx.get(stnApiUrl + '/years', (d: { years: number[] }) => {\r\n            if (d['error']) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d)\r\n            }\r\n        },\r\n        {},\r\n        error\r\n    );\r\n}\r\n\r\nexport interface iRouteGeom {\r\n    type: string,\r\n    crs: {\r\n        type: string\r\n        properties: {\r\n            name: string\r\n        }\r\n    },\r\n    features: {\r\n        type: string,\r\n        properties: {\r\n            rdwyLinkId: number,\r\n            rdwyRteId: number,\r\n            year: number\r\n        },\r\n        geometry: {\r\n            type: string,\r\n            coordinates: [number, number][]\r\n        }\r\n    }[]\r\n}\r\n\r\nexport function getRouteGeom(year: number, route: number,\r\n                             callback: (d: iRouteGeom) => any = (d: iRouteGeom) => {\r\n                                 console.log(d);\r\n                             },\r\n                             error: (e: iError) => any = (e) => {\r\n                                 console.log(e);\r\n                             }) {\r\n\r\n    ajx.get(stnApiUrl + '/route', (d: iRouteGeom) => {\r\n            if (d['error']) {\r\n                error(d as iError)\r\n            } else {\r\n                callback(d)\r\n            }\r\n        },\r\n        {year: year, route: route},\r\n        error\r\n    );\r\n}\r\n\r\n"]}