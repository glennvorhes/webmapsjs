/**
 * Created by gavorhes on 12/14/2015.
 */
"use strict";
var colors = require("../util/colors");
var provide_1 = require("../util/provide");
var LayerItsInventory_1 = require("../layers/LayerItsInventory");
var nm = provide_1.default('collections');
var itsConfig = [
    {
        name: 'Camera',
        itsType: 'cctv',
        minZoom: 11,
        itsIconConfig: {
            prop: 'owner',
            defaultName: 'WisDOT',
            defaultIcon: 'cctv.png',
            iconArray: [
                ['City of Madison', 'Madison', 'cctv-mad.png']
            ]
        }
    },
    {
        name: 'Message Signs',
        itsType: 'DMS',
        minZoom: 11,
        itsIconConfig: {
            prop: 'dmsType',
            defaultName: 'DMS',
            defaultIcon: 'dms.png',
            iconArray: [
                ['pcms', 'PCMS', 'pcms.png']
            ]
        }
    },
    { name: 'ATR', itsType: 'atr', minZoom: 8, itsIcon: 'atr.png', visible: false },
    { name: 'Lighting', itsType: 'light', minZoom: 16, itsIcon: 'streetlight.png', visible: false, onDemand: true },
    { name: 'Bluetooth', itsType: 'blue', minZoom: 10, itsIcon: 'bluetooth.png', visible: false },
    { name: 'Cabinets', itsType: 'cabinet', minZoom: 10, itsIcon: 'cabinet.png', visible: false },
    { name: 'Hut', itsType: 'hut', minZoom: 10, itsIcon: 'hut.png', visible: false },
    { name: 'Vault', itsType: 'vault', minZoom: 13, itsIcon: 'vault.png', visible: false },
    { name: 'Advisory Radio', itsType: 'har', minZoom: 10, itsIcon: 'har.png', visible: false },
    {
        name: 'Loop Detectors',
        itsType: 'loop',
        legendCollapse: true,
        minZoom: 14,
        visible: false,
        itsIconConfig: {
            prop: 'dtctrType',
            defaultName: 'Other',
            defaultIcon: 'loopdetectorother.png',
            iconArray: [
                ['detector', 'Detector', 'loopdetector.png'],
                ['long', 'Long', 'loopdetectorlong.png'],
                ['zone', 'Zone', 'loopdetectorzone.png']
            ]
        },
        onDemand: true
    },
    { name: 'Microwave', itsType: 'microwave', minZoom: 14, itsIcon: 'microwave.png', visible: false },
    { name: 'Pull Box', itsType: 'pull', minZoom: 14, itsIcon: 'pullbox.png', visible: false, onDemand: true },
    { name: 'RWIS', itsType: 'rwis', minZoom: 7, itsIcon: 'rwis.png', visible: false },
    { name: 'Ramp Gates', itsType: 'gate', minZoom: 10, itsIcon: 'rampgate.png', visible: false },
    { name: 'Ramp Meter', itsType: 'meter', minZoom: 10, itsIcon: 'rampmeter.png', visible: false },
    { name: 'Signal', itsType: 'signal', minZoom: 13, itsIcon: 'signal.png', visible: false, onDemand: true },
    { name: 'Tower', itsType: 'tower', minZoom: 10, itsIcon: 'tower.png', visible: false },
    {
        name: 'Trench',
        itsType: 'trench',
        onDemand: true,
        visible: false,
        onDemandDelay: 500,
        minZoom: 15,
        legendCollapse: true,
        itsLineConfig: {
            prop: 'owner',
            //defaultName: 'Other',
            //defaultWidth: 7,
            defaultColor: colors.hexAlphaToRgbOrRgba('#747474', 0.8),
            lineArray: [
                ['WisDOT', 'WisDOT', colors.hexAlphaToRgbOrRgba('#FF032F', 0.7)],
                ['WIN', 'WIN', colors.hexAlphaToRgbOrRgba('#FFC632', 0.7)],
                ['USXchange', 'USXchange', colors.hexAlphaToRgbOrRgba('#2DFF46', 0.7)],
                ['AT&T', 'AT&T', colors.hexAlphaToRgbOrRgba('#ff2be5', 0.7)],
                ['Touch America', 'Touch America', colors.hexAlphaToRgbOrRgba('#52f3ff', 0.7)],
                ['Qwest', 'Qwest', colors.hexAlphaToRgbOrRgba('#9278ff', 0.7)],
                ['McLeodUSA', 'McLeodUSA', colors.hexAlphaToRgbOrRgba('#2926FF', 0.7)],
                ['CINC', 'CINC', colors.hexAlphaToRgbOrRgba('#CB00FF', 0.7)],
                ['City of Madison', 'Madison', colors.hexAlphaToRgbOrRgba('#000380', 0.7)]
            ]
        }
    }
];
var ItsLayerCollection = (function () {
    /**
     * Create a collection of all ITS layers
     * @param {ol.Map} theMap the openlayers map
     * @param {Array} [exclude=[]] array of Its layer identifiers to exclude
     *
     * BLUE Bluetooth Detector - Bluetooth Detector
     * CABINET Cabinets - The cabinets
     * CCTV Camera - Traffic Cameras
     * HUT Communication Hut - Communication Hut
     * VAULT Communication Vault - The communication vaults
     * HAR Highway Advisory Radio - Advisory Radios
     * LIGHT Lighting - Lighting
     * LOOP Loop Detectors - Loop Detectors
     * DMS Message Board - Message Boards and Signs
     * MICROWAVE Microwave Detector - Microwave Detectors
     * PULL Pull Box - A pull box
     * RWIS RWIS - Road weather information system
     * GATE Ramp Gate - The ramp Gates
     * METER Ramp Meter - The ramp meters
     * SIGNAL Signal - Traffic Signal
     * TOWER Tower - The towers
     * TRENCH
     */
    function ItsLayerCollection(theMap, exclude) {
        this._map = theMap;
        this._layers = [];
        exclude = typeof exclude == 'object' ? exclude : [];
        for (var i = 0; i < itsConfig.length; i++) {
            var lyrConfig = itsConfig[i];
            var addLayer = true;
            for (var j = 0; j < exclude.length; j++) {
                if (exclude[j] == lyrConfig.itsType) {
                    addLayer = false;
                    break;
                }
            }
            if (addLayer) {
                var inventLyr = new LayerItsInventory_1.default(lyrConfig);
                this._map.addLayer(inventLyr.olLayer);
                this._layers.push(inventLyr);
            }
        }
    }
    Object.defineProperty(ItsLayerCollection.prototype, "layers", {
        /**
         * Return the array of layers in this collection
         * @returns {Array<LayerItsInventory>} an array of layers
         */
        get: function () {
            return this._layers;
        },
        enumerable: true,
        configurable: true
    });
    return ItsLayerCollection;
}());
exports.ItsLayerCollection = ItsLayerCollection;
nm.ItsLayerCollection = ItsLayerCollection;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ItsLayerCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRzTGF5ZXJDb2xsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbGxlY3Rpb25zL0l0c0xheWVyQ29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRzs7QUFFSCx1Q0FBeUM7QUFDekMsMkNBQXNDO0FBRXRDLGlFQUE0RDtBQUM1RCxJQUFJLEVBQUUsR0FBRyxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBR2hDLElBQUksU0FBUyxHQUFHO0lBQ1o7UUFDSSxJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRSxNQUFNO1FBQ2YsT0FBTyxFQUFFLEVBQUU7UUFDWCxhQUFhLEVBQUU7WUFDWCxJQUFJLEVBQUUsT0FBTztZQUNiLFdBQVcsRUFBRSxRQUFRO1lBQ3JCLFdBQVcsRUFBRSxVQUFVO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDUCxDQUFDLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUM7YUFDakQ7U0FDSjtLQUNKO0lBQ0Q7UUFDSSxJQUFJLEVBQUUsZUFBZTtRQUNyQixPQUFPLEVBQUUsS0FBSztRQUNkLE9BQU8sRUFBRSxFQUFFO1FBQ1gsYUFBYSxFQUFFO1lBQ1gsSUFBSSxFQUFFLFNBQVM7WUFDZixXQUFXLEVBQUUsS0FBSztZQUNsQixXQUFXLEVBQUUsU0FBUztZQUN0QixTQUFTLEVBQUU7Z0JBQ1AsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQzthQUMvQjtTQUNKO0tBQ0o7SUFDRCxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQztJQUM3RSxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxPQUFPLEVB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U0FBUyxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBTUQsc0JBQUksc0NBQU07UUFKVjs7O1dBR0c7YUFDSDtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBQ0wseUJBQUM7QUFBRCxDQUFDLEFBN0RELElBNkRDO0FBN0RZLGdEQUFrQjtBQStEL0IsRUFBRSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDOztBQUMzQyxrQkFBZSxrQkFBa0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDEyLzE0LzIwMTUuXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJy4uL3V0aWwvY29sb3JzJztcclxuaW1wb3J0IHByb3ZpZGUgZnJvbSAnLi4vdXRpbC9wcm92aWRlJztcclxuaW1wb3J0IG9sID0gcmVxdWlyZSgnY3VzdG9tLW9sJyk7XHJcbmltcG9ydCBMYXllckl0c0ludmVudG9yeSBmcm9tIFwiLi4vbGF5ZXJzL0xheWVySXRzSW52ZW50b3J5XCI7XHJcbmxldCBubSA9IHByb3ZpZGUoJ2NvbGxlY3Rpb25zJyk7XHJcblxyXG5cclxubGV0IGl0c0NvbmZpZyA9IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnQ2FtZXJhJyxcclxuICAgICAgICBpdHNUeXBlOiAnY2N0dicsXHJcbiAgICAgICAgbWluWm9vbTogMTEsXHJcbiAgICAgICAgaXRzSWNvbkNvbmZpZzoge1xyXG4gICAgICAgICAgICBwcm9wOiAnb3duZXInLFxyXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ1dpc0RPVCcsXHJcbiAgICAgICAgICAgIGRlZmF1bHRJY29uOiAnY2N0di5wbmcnLFxyXG4gICAgICAgICAgICBpY29uQXJyYXk6IFtcclxuICAgICAgICAgICAgICAgIFsnQ2l0eSBvZiBNYWRpc29uJywgJ01hZGlzb24nLCAnY2N0di1tYWQucG5nJ11cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ01lc3NhZ2UgU2lnbnMnLFxyXG4gICAgICAgIGl0c1R5cGU6ICdETVMnLFxyXG4gICAgICAgIG1pblpvb206IDExLFxyXG4gICAgICAgIGl0c0ljb25Db25maWc6IHtcclxuICAgICAgICAgICAgcHJvcDogJ2Rtc1R5cGUnLFxyXG4gICAgICAgICAgICBkZWZhdWx0TmFtZTogJ0RNUycsXHJcbiAgICAgICAgICAgIGRlZmF1bHRJY29uOiAnZG1zLnBuZycsXHJcbiAgICAgICAgICAgIGljb25BcnJheTogW1xyXG4gICAgICAgICAgICAgICAgWydwY21zJywgJ1BDTVMnLCAncGNtcy5wbmcnXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHtuYW1lOiAnQVRSJywgaXRzVHlwZTogJ2F0cicsIG1pblpvb206IDgsIGl0c0ljb246ICdhdHIucG5nJywgdmlzaWJsZTogZmFsc2V9LFxyXG4gICAge25hbWU6ICdMaWdodGluZycsIGl0c1R5cGU6ICdsaWdodCcsIG1pblpvb206IDE2LCBpdHNJY29uOiAnc3RyZWV0bGlnaHQucG5nJywgdmlzaWJsZTogZmFsc2UsIG9uRGVtYW5kOiB0cnVlfSxcclxuICAgIHtuYW1lOiAnQmx1ZXRvb3RoJywgaXRzVHlwZTogJ2JsdWUnLCBtaW5ab29tOiAxMCwgaXRzSWNvbjogJ2JsdWV0b290aC5wbmcnLCB2aXNpYmxlOiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ0NhYmluZXRzJywgaXRzVHlwZTogJ2NhYmluZXQnLCBtaW5ab29tOiAxMCwgaXRzSWNvbjogJ2NhYmluZXQucG5nJywgdmlzaWJsZTogZmFsc2V9LFxyXG4gICAge25hbWU6ICdIdXQnLCBpdHNUeXBlOiAnaHV0JywgbWluWm9vbTogMTAsIGl0c0ljb246ICdodXQucG5nJywgdmlzaWJsZTogZmFsc2V9LFxyXG4gICAge25hbWU6ICdWYXVsdCcsIGl0c1R5cGU6ICd2YXVsdCcsIG1pblpvb206IDEzLCBpdHNJY29uOiAndmF1bHQucG5nJywgdmlzaWJsZTogZmFsc2V9LFxyXG4gICAge25hbWU6ICdBZHZpc29yeSBSYWRpbycsIGl0c1R5cGU6ICdoYXInLCBtaW5ab29tOiAxMCwgaXRzSWNvbjogJ2hhci5wbmcnLCB2aXNpYmxlOiBmYWxzZX0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ0xvb3AgRGV0ZWN0b3JzJyxcclxuICAgICAgICBpdHNUeXBlOiAnbG9vcCcsXHJcbiAgICAgICAgbGVnZW5kQ29sbGFwc2U6IHRydWUsXHJcbiAgICAgICAgbWluWm9vbTogMTQsXHJcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgaXRzSWNvbkNvbmZpZzoge1xyXG4gICAgICAgICAgICBwcm9wOiAnZHRjdHJUeXBlJyxcclxuICAgICAgICAgICAgZGVmYXVsdE5hbWU6ICdPdGhlcicsXHJcbiAgICAgICAgICAgIGRlZmF1bHRJY29uOiAnbG9vcGRldGVjdG9yb3RoZXIucG5nJyxcclxuICAgICAgICAgICAgaWNvbkFycmF5OiBbXHJcbiAgICAgICAgICAgICAgICBbJ2RldGVjdG9yJywgJ0RldGVjdG9yJywgJ2xvb3BkZXRlY3Rvci5wbmcnXSxcclxuICAgICAgICAgICAgICAgIFsnbG9uZycsICdMb25nJywgJ2xvb3BkZXRlY3RvcmxvbmcucG5nJ10sXHJcbiAgICAgICAgICAgICAgICBbJ3pvbmUnLCAnWm9uZScsICdsb29wZGV0ZWN0b3J6b25lLnBuZyddXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRGVtYW5kOiB0cnVlXHJcbiAgICB9LFxyXG4gICAge25hbWU6ICdNaWNyb3dhdmUnLCBpdHNUeXBlOiAnbWljcm93YXZlJywgbWluWm9vbTogMTQsIGl0c0ljb246ICdtaWNyb3dhdmUucG5nJywgdmlzaWJsZTogZmFsc2V9LFxyXG4gICAge25hbWU6ICdQdWxsIEJveCcsIGl0c1R5cGU6ICdwdWxsJywgbWluWm9vbTogMTQsIGl0c0ljb246ICdwdWxsYm94LnBuZycsIHZpc2libGU6IGZhbHNlLCBvbkRlbWFuZDogdHJ1ZX0sXHJcbiAgICB7bmFtZTogJ1JXSVMnLCBpdHNUeXBlOiAncndpcycsIG1pblpvb206IDcsIGl0c0ljb246ICdyd2lzLnBuZycsIHZpc2libGU6IGZhbHNlfSxcclxuICAgIHtuYW1lOiAnUmFtcCBHYXRlcycsIGl0c1R5cGU6ICdnYXRlJywgbWluWm9vbTogMTAsIGl0c0ljb246ICdyYW1wZ2F0ZS5wbmcnLCB2aXNpYmxlOiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1JhbXAgTWV0ZXInLCBpdHNUeXBlOiAnbWV0ZXInLCBtaW5ab29tOiAxMCwgaXRzSWNvbjogJ3JhbXBtZXRlci5wbmcnLCB2aXNpYmxlOiBmYWxzZX0sXHJcbiAgICB7bmFtZTogJ1NpZ25hbCcsIGl0c1R5cGU6ICdzaWduYWwnLCBtaW5ab29tOiAxMywgaXRzSWNvbjogJ3NpZ25hbC5wbmcnLCB2aXNpYmxlOiBmYWxzZSwgb25EZW1hbmQ6IHRydWV9LFxyXG4gICAge25hbWU6ICdUb3dlcicsIGl0c1R5cGU6ICd0b3dlcicsIG1pblpvb206IDEwLCBpdHNJY29uOiAndG93ZXIucG5nJywgdmlzaWJsZTogZmFsc2V9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdUcmVuY2gnLFxyXG4gICAgICAgIGl0c1R5cGU6ICd0cmVuY2gnLFxyXG4gICAgICAgIG9uRGVtYW5kOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIG9uRGVtYW5kRGVsYXk6IDUwMCxcclxuICAgICAgICBtaW5ab29tOiAxNSxcclxuICAgICAgICBsZWdlbmRDb2xsYXBzZTogdHJ1ZSxcclxuICAgICAgICBpdHNMaW5lQ29uZmlnOiB7XHJcbiAgICAgICAgICAgIHByb3A6ICdvd25lcicsXHJcbiAgICAgICAgICAgIC8vZGVmYXVsdE5hbWU6ICdPdGhlcicsXHJcbiAgICAgICAgICAgIC8vZGVmYXVsdFdpZHRoOiA3LFxyXG4gICAgICAgICAgICBkZWZhdWx0Q29sb3I6IGNvbG9ycy5oZXhBbHBoYVRvUmdiT3JSZ2JhKCcjNzQ3NDc0JywgMC44KSxcclxuICAgICAgICAgICAgbGluZUFycmF5OiBbXHJcbiAgICAgICAgICAgICAgICBbJ1dpc0RPVCcsICdXaXNET1QnLCBjb2xvcnMuaGV4QWxwaGFUb1JnYk9yUmdiYSgnI0ZGMDMyRicsIDAuNyldLFxyXG4gICAgICAgICAgICAgICAgWydXSU4nLCAnV0lOJywgY29sb3JzLmhleEFscGhhVG9SZ2JPclJnYmEoJyNGRkM2MzInLCAwLjcpXSxcclxuICAgICAgICAgICAgICAgIFsnVVNYY2hhbmdlJywgJ1VTWGNoYW5nZScsIGNvbG9ycy5oZXhBbHBoYVRvUmdiT3JSZ2JhKCcjMkRGRjQ2JywgMC43KV0sXHJcbiAgICAgICAgICAgICAgICBbJ0FUJlQnLCAnQVQmVCcsIGNvbG9ycy5oZXhBbHBoYVRvUmdiT3JSZ2JhKCcjZmYyYmU1JywgMC43KV0sXHJcbiAgICAgICAgICAgICAgICBbJ1RvdWNoIEFtZXJpY2EnLCAnVG91Y2ggQW1lcmljYScsIGNvbG9ycy5oZXhBbHBoYVRvUmdiT3JSZ2JhKCcjNTJmM2ZmJywgMC43KV0sXHJcbiAgICAgICAgICAgICAgICBbJ1F3ZXN0JywgJ1F3ZXN0JywgY29sb3JzLmhleEFscGhhVG9SZ2JPclJnYmEoJyM5Mjc4ZmYnLCAwLjcpXSxcclxuICAgICAgICAgICAgICAgIFsnTWNMZW9kVVNBJywgJ01jTGVvZFVTQScsIGNvbG9ycy5oZXhBbHBoYVRvUmdiT3JSZ2JhKCcjMjkyNkZGJywgMC43KV0sXHJcbiAgICAgICAgICAgICAgICBbJ0NJTkMnLCAnQ0lOQycsIGNvbG9ycy5oZXhBbHBoYVRvUmdiT3JSZ2JhKCcjQ0IwMEZGJywgMC43KV0sXHJcbiAgICAgICAgICAgICAgICBbJ0NpdHkgb2YgTWFkaXNvbicsICdNYWRpc29uJywgY29sb3JzLmhleEFscGhhVG9SZ2JPclJnYmEoJyMwMDAzODAnLCAwLjcpXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbl07XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEl0c0xheWVyQ29sbGVjdGlvbiB7XHJcbiAgICBfbWFwOiBvbC5NYXA7XHJcbiAgICBfbGF5ZXJzOiBBcnJheTxMYXllckl0c0ludmVudG9yeT47XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgY29sbGVjdGlvbiBvZiBhbGwgSVRTIGxheWVyc1xyXG4gICAgICogQHBhcmFtIHtvbC5NYXB9IHRoZU1hcCB0aGUgb3BlbmxheWVycyBtYXBcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtleGNsdWRlPVtdXSBhcnJheSBvZiBJdHMgbGF5ZXIgaWRlbnRpZmllcnMgdG8gZXhjbHVkZVxyXG4gICAgICpcclxuICAgICAqIEJMVUUgQmx1ZXRvb3RoIERldGVjdG9yIC0gQmx1ZXRvb3RoIERldGVjdG9yXHJcbiAgICAgKiBDQUJJTkVUIENhYmluZXRzIC0gVGhlIGNhYmluZXRzXHJcbiAgICAgKiBDQ1RWIENhbWVyYSAtIFRyYWZmaWMgQ2FtZXJhc1xyXG4gICAgICogSFVUIENvbW11bmljYXRpb24gSHV0IC0gQ29tbXVuaWNhdGlvbiBIdXRcclxuICAgICAqIFZBVUxUIENvbW11bmljYXRpb24gVmF1bHQgLSBUaGUgY29tbXVuaWNhdGlvbiB2YXVsdHNcclxuICAgICAqIEhBUiBIaWdod2F5IEFkdmlzb3J5IFJhZGlvIC0gQWR2aXNvcnkgUmFkaW9zXHJcbiAgICAgKiBMSUdIVCBMaWdodGluZyAtIExpZ2h0aW5nXHJcbiAgICAgKiBMT09QIExvb3AgRGV0ZWN0b3JzIC0gTG9vcCBEZXRlY3RvcnNcclxuICAgICAqIERNUyBNZXNzYWdlIEJvYXJkIC0gTWVzc2FnZSBCb2FyZHMgYW5kIFNpZ25zXHJcbiAgICAgKiBNSUNST1dBVkUgTWljcm93YXZlIERldGVjdG9yIC0gTWljcm93YXZlIERldGVjdG9yc1xyXG4gICAgICogUFVMTCBQdWxsIEJveCAtIEEgcHVsbCBib3hcclxuICAgICAqIFJXSVMgUldJUyAtIFJvYWQgd2VhdGhlciBpbmZvcm1hdGlvbiBzeXN0ZW1cclxuICAgICAqIEdBVEUgUmFtcCBHYXRlIC0gVGhlIHJhbXAgR2F0ZXNcclxuICAgICAqIE1FVEVSIFJhbXAgTWV0ZXIgLSBUaGUgcmFtcCBtZXRlcnNcclxuICAgICAqIFNJR05BTCBTaWduYWwgLSBUcmFmZmljIFNpZ25hbFxyXG4gICAgICogVE9XRVIgVG93ZXIgLSBUaGUgdG93ZXJzXHJcbiAgICAgKiBUUkVOQ0hcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGhlTWFwOiBvbC5NYXAsIGV4Y2x1ZGU/OiBBcnJheTxzdHJpbmc+KSB7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcCA9IHRoZU1hcDtcclxuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcclxuXHJcbiAgICAgICAgZXhjbHVkZSA9IHR5cGVvZiBleGNsdWRlID09ICdvYmplY3QnID8gZXhjbHVkZSA6IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0c0NvbmZpZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgbHlyQ29uZmlnID0gaXRzQ29uZmlnW2ldO1xyXG4gICAgICAgICAgICBsZXQgYWRkTGF5ZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBleGNsdWRlLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhjbHVkZVtqXSA9PSBseXJDb25maWcuaXRzVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZExheWVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhZGRMYXllcikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGludmVudEx5ciA9IG5ldyBMYXllckl0c0ludmVudG9yeShseXJDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLmFkZExheWVyKGludmVudEx5ci5vbExheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xheWVycy5wdXNoKGludmVudEx5cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIGFycmF5IG9mIGxheWVycyBpbiB0aGlzIGNvbGxlY3Rpb25cclxuICAgICAqIEByZXR1cm5zIHtBcnJheTxMYXllckl0c0ludmVudG9yeT59IGFuIGFycmF5IG9mIGxheWVyc1xyXG4gICAgICovXHJcbiAgICBnZXQgbGF5ZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sYXllcnM7XHJcbiAgICB9XHJcbn1cclxuXHJcbm5tLkl0c0xheWVyQ29sbGVjdGlvbiA9IEl0c0xheWVyQ29sbGVjdGlvbjtcclxuZXhwb3J0IGRlZmF1bHQgSXRzTGF5ZXJDb2xsZWN0aW9uO1xyXG4iXX0=