/**
 * Created by gavorhes on 11/4/2015.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var provide_1 = require("./provide");
var nm = provide_1.default('util.dateConvert');
function leadingPad(inNum) {
    var strNum = inNum.toFixed();
    if (strNum.length < 2) {
        strNum = '0' + strNum;
    }
    return strNum;
}
nm.leadingPad = leadingPad;
/**
 * Given a date return a string in the format YYYY-mm-dd hh:MM:SS
 * @param {Date} dte to convert
 * @returns {string} the formatted date string
 */
function dateToYyyyMmDdHhMmSs(dte) {
    var yr = dte.getFullYear();
    var month = leadingPad(dte.getMonth() + 1);
    var day = leadingPad(dte.getDate());
    var hrs = leadingPad(dte.getHours());
    var mns = leadingPad(dte.getMinutes());
    var secs = leadingPad(dte.getSeconds());
    return yr + "-" + month + "-" + day + " " + hrs + ":" + mns + ":" + secs;
}
exports.dateToYyyyMmDdHhMmSs = dateToYyyyMmDdHhMmSs;
nm.dateToYyyyMmDdHhMmSs = dateToYyyyMmDdHhMmSs;
/**
 * Given a date return a string in the format YYYYmmdd_hh0000
 * @param {Date} dte the input date
 * @returns {string} the formatted date string
 */
function dateToYyyyMmDdHh000(dte) {
    var yr = dte.getFullYear();
    var month = leadingPad(dte.getMonth() + 1);
    var day = leadingPad(dte.getDate());
    var hrs = leadingPad(dte.getHours());
    return "" + yr + month + day + "_" + hrs + "0000";
}
exports.dateToYyyyMmDdHh000 = dateToYyyyMmDdHh000;
nm.dateToYyyyMmDdHh000 = dateToYyyyMmDdHh000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZUNvbnZlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9kYXRlQ29udmVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRzs7O0FBRUgscUNBQWdDO0FBQ2hDLElBQUksRUFBRSxHQUFHLGlCQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUVyQyxvQkFBb0IsS0FBSztJQUNyQixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxFQUFFLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUUzQjs7OztHQUlHO0FBQ0gsOEJBQXFDLEdBQVM7SUFDMUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNyQyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDdkMsSUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBRXhDLE1BQU0sQ0FBSSxFQUFFLFNBQUksS0FBSyxTQUFJLEdBQUcsU0FBSSxHQUFHLFNBQUksR0FBRyxTQUFJLElBQU0sQ0FBQztBQUN6RCxDQUFDO0FBVEQsb0RBU0M7QUFFRCxFQUFFLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7QUFHL0M7Ozs7R0FJRztBQUNILDZCQUFvQyxHQUFTO0lBRXpDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzQixJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNwQyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFckMsTUFBTSxDQUFDLEtBQUcsRUFBRSxHQUFHLEtBQUssR0FBRyxHQUFHLFNBQUksR0FBRyxTQUFNLENBQUM7QUFDNUMsQ0FBQztBQVJELGtEQVFDO0FBRUQsRUFBRSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgZ2F2b3JoZXMgb24gMTEvNC8yMDE1LlxyXG4gKi9cclxuXHJcbmltcG9ydCBwcm92aWRlIGZyb20gJy4vcHJvdmlkZSc7XHJcbmxldCBubSA9IHByb3ZpZGUoJ3V0aWwuZGF0ZUNvbnZlcnQnKTtcclxuXHJcbmZ1bmN0aW9uIGxlYWRpbmdQYWQoaW5OdW0pIHtcclxuICAgIGxldCBzdHJOdW0gPSBpbk51bS50b0ZpeGVkKCk7XHJcbiAgICBpZiAoc3RyTnVtLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICBzdHJOdW0gPSAnMCcgKyBzdHJOdW07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0ck51bTtcclxufVxyXG5cclxubm0ubGVhZGluZ1BhZCA9IGxlYWRpbmdQYWQ7XHJcblxyXG4vKipcclxuICogR2l2ZW4gYSBkYXRlIHJldHVybiBhIHN0cmluZyBpbiB0aGUgZm9ybWF0IFlZWVktbW0tZGQgaGg6TU06U1NcclxuICogQHBhcmFtIHtEYXRlfSBkdGUgdG8gY29udmVydFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvWXl5eU1tRGRIaE1tU3MoZHRlOiBEYXRlKTogc3RyaW5nIHtcclxuICAgIGxldCB5ciA9IGR0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgbGV0IG1vbnRoID0gbGVhZGluZ1BhZChkdGUuZ2V0TW9udGgoKSArIDEpO1xyXG4gICAgbGV0IGRheSA9IGxlYWRpbmdQYWQoZHRlLmdldERhdGUoKSk7XHJcbiAgICBsZXQgaHJzID0gbGVhZGluZ1BhZChkdGUuZ2V0SG91cnMoKSk7XHJcbiAgICBsZXQgbW5zID0gbGVhZGluZ1BhZChkdGUuZ2V0TWludXRlcygpKTtcclxuICAgIGxldCBzZWNzID0gbGVhZGluZ1BhZChkdGUuZ2V0U2Vjb25kcygpKTtcclxuXHJcbiAgICByZXR1cm4gYCR7eXJ9LSR7bW9udGh9LSR7ZGF5fSAke2hyc306JHttbnN9OiR7c2Vjc31gO1xyXG59XHJcblxyXG5ubS5kYXRlVG9ZeXl5TW1EZEhoTW1TcyA9IGRhdGVUb1l5eXlNbURkSGhNbVNzO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBHaXZlbiBhIGRhdGUgcmV0dXJuIGEgc3RyaW5nIGluIHRoZSBmb3JtYXQgWVlZWW1tZGRfaGgwMDAwXHJcbiAqIEBwYXJhbSB7RGF0ZX0gZHRlIHRoZSBpbnB1dCBkYXRlXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9ZeXl5TW1EZEhoMDAwKGR0ZTogRGF0ZSk6IHN0cmluZyB7XHJcblxyXG4gICAgbGV0IHlyID0gZHRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBsZXQgbW9udGggPSBsZWFkaW5nUGFkKGR0ZS5nZXRNb250aCgpICsgMSk7XHJcbiAgICBsZXQgZGF5ID0gbGVhZGluZ1BhZChkdGUuZ2V0RGF0ZSgpKTtcclxuICAgIGxldCBocnMgPSBsZWFkaW5nUGFkKGR0ZS5nZXRIb3VycygpKTtcclxuXHJcbiAgICByZXR1cm4gYCR7eXJ9JHttb250aH0ke2RheX1fJHtocnN9MDAwMGA7XHJcbn1cclxuXHJcbm5tLmRhdGVUb1l5eXlNbURkSGgwMDAgPSBkYXRlVG9ZeXl5TW1EZEhoMDAwO1xyXG4iXX0=