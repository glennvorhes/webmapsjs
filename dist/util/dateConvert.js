/**
 * Created by gavorhes on 11/4/2015.
 */
"use strict";
var provide_1 = require("./provide");
var nm = provide_1.default('util.dateConvert');
function leadingPad(inNum) {
    var strNum = inNum.toFixed();
    if (strNum.length < 2) {
        strNum = '0' + strNum;
    }
    return strNum;
}
nm.leadingPad = leadingPad;
/**
 * Given a date return a string in the format YYYY-mm-dd hh:MM:SS
 * @param {Date} dte to convert
 * @returns {string} the formatted date string
 */
function dateToYyyyMmDdHhMmSs(dte) {
    var yr = dte.getFullYear();
    var month = leadingPad(dte.getMonth() + 1);
    var day = leadingPad(dte.getDate());
    var hrs = leadingPad(dte.getHours());
    var mns = leadingPad(dte.getMinutes());
    var secs = leadingPad(dte.getSeconds());
    return yr + "-" + month + "-" + day + " " + hrs + ":" + mns + ":" + secs;
}
exports.dateToYyyyMmDdHhMmSs = dateToYyyyMmDdHhMmSs;
nm.dateToYyyyMmDdHhMmSs = dateToYyyyMmDdHhMmSs;
/**
 * Given a date return a string in the format YYYYmmdd_hh0000
 * @param {Date} dte the input date
 * @returns {string} the formatted date string
 */
function dateToYyyyMmDdHh000(dte) {
    var yr = dte.getFullYear();
    var month = leadingPad(dte.getMonth() + 1);
    var day = leadingPad(dte.getDate());
    var hrs = leadingPad(dte.getHours());
    return "" + yr + month + day + "_" + hrs + "0000";
}
exports.dateToYyyyMmDdHh000 = dateToYyyyMmDdHh000;
nm.dateToYyyyMmDdHh000 = dateToYyyyMmDdHh000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZUNvbnZlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9kYXRlQ29udmVydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRzs7QUFFSCxxQ0FBZ0M7QUFDaEMsSUFBSSxFQUFFLEdBQUcsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXJDLG9CQUFvQixLQUFLO0lBQ3JCLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM3QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELEVBQUUsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBRTNCOzs7O0dBSUc7QUFDSCw4QkFBcUMsR0FBUztJQUMxQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDcEMsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN2QyxJQUFJLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFFeEMsTUFBTSxDQUFJLEVBQUUsU0FBSSxLQUFLLFNBQUksR0FBRyxTQUFJLEdBQUcsU0FBSSxHQUFHLFNBQUksSUFBTSxDQUFDO0FBQ3pELENBQUM7QUFURCxvREFTQztBQUVELEVBQUUsQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztBQUcvQzs7OztHQUlHO0FBQ0gsNkJBQW9DLEdBQVM7SUFFekMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUVyQyxNQUFNLENBQUMsS0FBRyxFQUFFLEdBQUcsS0FBSyxHQUFHLEdBQUcsU0FBSSxHQUFHLFNBQU0sQ0FBQztBQUM1QyxDQUFDO0FBUkQsa0RBUUM7QUFFRCxFQUFFLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBnYXZvcmhlcyBvbiAxMS80LzIwMTUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHByb3ZpZGUgZnJvbSAnLi9wcm92aWRlJztcclxubGV0IG5tID0gcHJvdmlkZSgndXRpbC5kYXRlQ29udmVydCcpO1xyXG5cclxuZnVuY3Rpb24gbGVhZGluZ1BhZChpbk51bSkge1xyXG4gICAgbGV0IHN0ck51bSA9IGluTnVtLnRvRml4ZWQoKTtcclxuICAgIGlmIChzdHJOdW0ubGVuZ3RoIDwgMikge1xyXG4gICAgICAgIHN0ck51bSA9ICcwJyArIHN0ck51bTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyTnVtO1xyXG59XHJcblxyXG5ubS5sZWFkaW5nUGFkID0gbGVhZGluZ1BhZDtcclxuXHJcbi8qKlxyXG4gKiBHaXZlbiBhIGRhdGUgcmV0dXJuIGEgc3RyaW5nIGluIHRoZSBmb3JtYXQgWVlZWS1tbS1kZCBoaDpNTTpTU1xyXG4gKiBAcGFyYW0ge0RhdGV9IGR0ZSB0byBjb252ZXJ0XHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9ZeXl5TW1EZEhoTW1TcyhkdGU6IERhdGUpOiBzdHJpbmcge1xyXG4gICAgbGV0IHlyID0gZHRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBsZXQgbW9udGggPSBsZWFkaW5nUGFkKGR0ZS5nZXRNb250aCgpICsgMSk7XHJcbiAgICBsZXQgZGF5ID0gbGVhZGluZ1BhZChkdGUuZ2V0RGF0ZSgpKTtcclxuICAgIGxldCBocnMgPSBsZWFkaW5nUGFkKGR0ZS5nZXRIb3VycygpKTtcclxuICAgIGxldCBtbnMgPSBsZWFkaW5nUGFkKGR0ZS5nZXRNaW51dGVzKCkpO1xyXG4gICAgbGV0IHNlY3MgPSBsZWFkaW5nUGFkKGR0ZS5nZXRTZWNvbmRzKCkpO1xyXG5cclxuICAgIHJldHVybiBgJHt5cn0tJHttb250aH0tJHtkYXl9ICR7aHJzfToke21uc306JHtzZWNzfWA7XHJcbn1cclxuXHJcbm5tLmRhdGVUb1l5eXlNbURkSGhNbVNzID0gZGF0ZVRvWXl5eU1tRGRIaE1tU3M7XHJcblxyXG5cclxuLyoqXHJcbiAqIEdpdmVuIGEgZGF0ZSByZXR1cm4gYSBzdHJpbmcgaW4gdGhlIGZvcm1hdCBZWVlZbW1kZF9oaDAwMDBcclxuICogQHBhcmFtIHtEYXRlfSBkdGUgdGhlIGlucHV0IGRhdGVcclxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUb1l5eXlNbURkSGgwMDAoZHRlOiBEYXRlKTogc3RyaW5nIHtcclxuXHJcbiAgICBsZXQgeXIgPSBkdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIGxldCBtb250aCA9IGxlYWRpbmdQYWQoZHRlLmdldE1vbnRoKCkgKyAxKTtcclxuICAgIGxldCBkYXkgPSBsZWFkaW5nUGFkKGR0ZS5nZXREYXRlKCkpO1xyXG4gICAgbGV0IGhycyA9IGxlYWRpbmdQYWQoZHRlLmdldEhvdXJzKCkpO1xyXG5cclxuICAgIHJldHVybiBgJHt5cn0ke21vbnRofSR7ZGF5fV8ke2hyc30wMDAwYDtcclxufVxyXG5cclxubm0uZGF0ZVRvWXl5eU1tRGRIaDAwMCA9IGRhdGVUb1l5eXlNbURkSGgwMDA7XHJcbiJdfQ==