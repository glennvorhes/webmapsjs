"use strict";
/**
 * Created by gavorhes on 6/23/2016.
 */
var provide_1 = require("./provide");
var nm = provide_1.default('util');
function isNumber(checkVal) {
    var returnVal = parseFloat(checkVal);
    return !isNaN(returnVal);
}
/**
 *
 * @returns {object} object representation of url params
 */
function getUrlParams() {
    "use strict";
    var match;
    var pl = /\+/g; // Regex for replacing addition symbol with a space
    var search = /([^&=]+)=?([^&]*)/g;
    var decode = function (s) {
        return decodeURIComponent(s.replace(pl, " "));
    };
    var query = window.location.search.substring(1);
    var urlParams = {};
    while (match = search.exec(query)) {
        /**
         * @type {string}
         */
        var val = decode(match[2]).trim();
        var typedVal = null;
        if (val.length == 0) {
        }
        else if (isNumber(val)) {
            if (val.indexOf('.') > -1) {
                typedVal = parseFloat(val);
            }
            else {
                typedVal = parseInt(val);
            }
        }
        else if (val.toLowerCase() == 'false' || val.toLowerCase() == 'true') {
            typedVal = val.toLowerCase() == 'true';
        }
        else {
            typedVal = val;
        }
        urlParams[decode(match[1])] = typedVal;
    }
    return urlParams;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getUrlParams;
nm.getUrlParams = getUrlParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VXJsUGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvZ2V0VXJsUGFyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRztBQUNILHFDQUFnQztBQUNoQyxJQUFJLEVBQUUsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBR3pCLGtCQUFrQixRQUFhO0lBQzNCLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVyQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQUVEOzs7R0FHRztBQUNIO0lBQ0ksWUFBWSxDQUFDO0lBRWIsSUFBSSxLQUFLLENBQUM7SUFDVixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBRSxtREFBbUQ7SUFDcEUsSUFBSSxNQUFNLEdBQUcsb0JBQW9CLENBQUM7SUFDbEMsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQztJQUNGLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRCxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDbkIsT0FBTyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2hDOztXQUVHO1FBQ0gsSUFBSSxHQUFHLEdBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRW5DLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztRQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7UUFFckIsQ0FBQztRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ3BCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO2dCQUN2QixRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLENBQUM7UUFDTCxDQUFDO1FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxPQUFPLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQyxDQUFBLENBQUM7WUFDbEUsUUFBUSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxNQUFNLENBQUM7UUFDM0MsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDO1lBQ0YsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNuQixDQUFDO1FBQ0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNyQixDQUFDOztBQXZDRCwrQkF1Q0M7QUFFRCxFQUFFLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDYvMjMvMjAxNi5cclxuICovXHJcbmltcG9ydCBwcm92aWRlIGZyb20gJy4vcHJvdmlkZSc7XHJcbmxldCBubSA9IHByb3ZpZGUoJ3V0aWwnKTtcclxuXHJcblxyXG5mdW5jdGlvbiBpc051bWJlcihjaGVja1ZhbDogYW55KTogIGJvb2xlYW57XHJcbiAgICBsZXQgcmV0dXJuVmFsID0gcGFyc2VGbG9hdChjaGVja1ZhbCk7XHJcblxyXG4gICAgcmV0dXJuICFpc05hTihyZXR1cm5WYWwpO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHJldHVybnMge29iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHVybCBwYXJhbXNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVybFBhcmFtcygpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGxldCBtYXRjaDtcclxuICAgIGxldCBwbCA9IC9cXCsvZzsgIC8vIFJlZ2V4IGZvciByZXBsYWNpbmcgYWRkaXRpb24gc3ltYm9sIHdpdGggYSBzcGFjZVxyXG4gICAgbGV0IHNlYXJjaCA9IC8oW14mPV0rKT0/KFteJl0qKS9nO1xyXG4gICAgbGV0IGRlY29kZSA9IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzLnJlcGxhY2UocGwsIFwiIFwiKSk7XHJcbiAgICB9O1xyXG4gICAgbGV0IHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7XHJcblxyXG4gICAgbGV0IHVybFBhcmFtcyA9IHt9O1xyXG4gICAgd2hpbGUgKG1hdGNoID0gc2VhcmNoLmV4ZWMocXVlcnkpKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZXQgdmFsID0gIGRlY29kZShtYXRjaFsyXSkudHJpbSgpO1xyXG5cclxuICAgICAgICBsZXQgdHlwZWRWYWwgPSBudWxsO1xyXG4gICAgICAgIGlmICh2YWwubGVuZ3RoID09IDApe1xyXG4gICAgICAgICAgICAvLyBwYXNzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyKHZhbCkpe1xyXG4gICAgICAgICAgICBpZiAodmFsLmluZGV4T2YoJy4nKSA+IC0xKXtcclxuICAgICAgICAgICAgICAgIHR5cGVkVmFsID0gcGFyc2VGbG9hdCh2YWwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHlwZWRWYWwgPSBwYXJzZUludCh2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbC50b0xvd2VyQ2FzZSgpID09ICdmYWxzZScgfHwgdmFsLnRvTG93ZXJDYXNlKCkgPT0gJ3RydWUnKXtcclxuICAgICAgICAgICAgdHlwZWRWYWwgPSB2YWwudG9Mb3dlckNhc2UoKSA9PSAndHJ1ZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0eXBlZFZhbCA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXJsUGFyYW1zW2RlY29kZShtYXRjaFsxXSldID0gdHlwZWRWYWw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHVybFBhcmFtcztcclxufVxyXG5cclxubm0uZ2V0VXJsUGFyYW1zID0gZ2V0VXJsUGFyYW1zO1xyXG5cclxuXHJcbiJdfQ==