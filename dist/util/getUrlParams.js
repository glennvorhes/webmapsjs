"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by gavorhes on 6/23/2016.
 */
var provide_1 = require("./provide");
var nm = provide_1.default('util');
function isNumber(checkVal) {
    var returnVal = parseFloat(checkVal);
    return !isNaN(returnVal);
}
/**
 *
 * @returns {object} object representation of url params
 */
function getUrlParams() {
    "use strict";
    var match;
    var pl = /\+/g; // Regex for replacing addition symbol with a space
    var search = /([^&=]+)=?([^&]*)/g;
    var decode = function (s) {
        return decodeURIComponent(s.replace(pl, " "));
    };
    var query = window.location.search.substring(1);
    var urlParams = {};
    while (match = search.exec(query)) {
        /**
         * @type {string}
         */
        var val = decode(match[2]).trim();
        var typedVal = null;
        if (val.length == 0) {
            // pass
        }
        else if (isNumber(val)) {
            if (val.indexOf('.') > -1) {
                typedVal = parseFloat(val);
            }
            else {
                typedVal = parseInt(val);
            }
        }
        else if (val.toLowerCase() == 'false' || val.toLowerCase() == 'true') {
            typedVal = val.toLowerCase() == 'true';
        }
        else {
            typedVal = val;
        }
        urlParams[decode(match[1])] = typedVal;
    }
    return urlParams;
}
exports.default = getUrlParams;
nm.getUrlParams = getUrlParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VXJsUGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvZ2V0VXJsUGFyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxxQ0FBZ0M7QUFDaEMsSUFBSSxFQUFFLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUd6QixrQkFBa0IsUUFBYTtJQUMzQixJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFckMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFFRDs7O0dBR0c7QUFDSDtJQUNJLFlBQVksQ0FBQztJQUViLElBQUksS0FBSyxDQUFDO0lBQ1YsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUUsbURBQW1EO0lBQ3BFLElBQUksTUFBTSxHQUFHLG9CQUFvQixDQUFDO0lBQ2xDLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUNwQixNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUM7SUFDRixJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEQsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ25CLE9BQU8sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNoQzs7V0FFRztRQUNILElBQUksR0FBRyxHQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVuQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2pCLE9BQU87UUFDWCxDQUFDO1FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDcEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7Z0JBQ3ZCLFFBQVEsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsQ0FBQztRQUNMLENBQUM7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLE9BQU8sSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDLENBQUEsQ0FBQztZQUNsRSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQztRQUMzQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDRixRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ25CLENBQUM7UUFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUF2Q0QsK0JBdUNDO0FBRUQsRUFBRSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBnYXZvcmhlcyBvbiA2LzIzLzIwMTYuXHJcbiAqL1xyXG5pbXBvcnQgcHJvdmlkZSBmcm9tICcuL3Byb3ZpZGUnO1xyXG5sZXQgbm0gPSBwcm92aWRlKCd1dGlsJyk7XHJcblxyXG5cclxuZnVuY3Rpb24gaXNOdW1iZXIoY2hlY2tWYWw6IGFueSk6ICBib29sZWFue1xyXG4gICAgbGV0IHJldHVyblZhbCA9IHBhcnNlRmxvYXQoY2hlY2tWYWwpO1xyXG5cclxuICAgIHJldHVybiAhaXNOYU4ocmV0dXJuVmFsKTtcclxufVxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB1cmwgcGFyYW1zXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVcmxQYXJhbXMoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBsZXQgcGwgPSAvXFwrL2c7ICAvLyBSZWdleCBmb3IgcmVwbGFjaW5nIGFkZGl0aW9uIHN5bWJvbCB3aXRoIGEgc3BhY2VcclxuICAgIGxldCBzZWFyY2ggPSAvKFteJj1dKyk9PyhbXiZdKikvZztcclxuICAgIGxldCBkZWNvZGUgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKHBsLCBcIiBcIikpO1xyXG4gICAgfTtcclxuICAgIGxldCBxdWVyeSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpO1xyXG5cclxuICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcclxuICAgIHdoaWxlIChtYXRjaCA9IHNlYXJjaC5leGVjKHF1ZXJ5KSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IHZhbCA9ICBkZWNvZGUobWF0Y2hbMl0pLnRyaW0oKTtcclxuXHJcbiAgICAgICAgbGV0IHR5cGVkVmFsID0gbnVsbDtcclxuICAgICAgICBpZiAodmFsLmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgLy8gcGFzc1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc051bWJlcih2YWwpKXtcclxuICAgICAgICAgICAgaWYgKHZhbC5pbmRleE9mKCcuJykgPiAtMSl7XHJcbiAgICAgICAgICAgICAgICB0eXBlZFZhbCA9IHBhcnNlRmxvYXQodmFsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHR5cGVkVmFsID0gcGFyc2VJbnQodmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWwudG9Mb3dlckNhc2UoKSA9PSAnZmFsc2UnIHx8IHZhbC50b0xvd2VyQ2FzZSgpID09ICd0cnVlJyl7XHJcbiAgICAgICAgICAgIHR5cGVkVmFsID0gdmFsLnRvTG93ZXJDYXNlKCkgPT0gJ3RydWUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZWRWYWwgPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVybFBhcmFtc1tkZWNvZGUobWF0Y2hbMV0pXSA9IHR5cGVkVmFsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmxQYXJhbXM7XHJcbn1cclxuXHJcbm5tLmdldFVybFBhcmFtcyA9IGdldFVybFBhcmFtcztcclxuXHJcblxyXG4iXX0=