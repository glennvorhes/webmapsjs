"use strict";
/**
 * Created by gavorhes on 7/18/2016.
 */
var provide_1 = require("../util/provide");
var nm = provide_1.default('util');
/**
 *
 * @param {Array<LayerBaseVector>|Array<ol.layer.Vector>|LayerBaseVector|ol.layer.Vector|*} layers - array of layers or single
 * @returns {ol.Extent|Array<number>|*} - collective extent
 */
function calculateExtent(layers) {
    "use strict";
    var hasExtent = false;
    var minX = 10E100;
    var minY = 10E100;
    var maxX = -10E100;
    var maxY = -10E100;
    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {
        var lyr = layers_1[_i];
        /**
         *
         * @type {ol.layer.Vector}
         */
        var olLayer = lyr['olLayer'] || lyr;
        if (olLayer.getSource().getFeatures().length > 0) {
            hasExtent = true;
            var ext = olLayer.getSource().getExtent();
            minX = ext[0] < minX ? ext[0] : minX;
            minY = ext[1] < minY ? ext[1] : minY;
            maxX = ext[2] > maxX ? ext[2] : maxX;
            maxY = ext[3] > maxY ? ext[3] : maxY;
        }
    }
    if (hasExtent) {
        return [minX, minY, maxX, maxY];
    }
    else {
        return undefined;
    }
}
exports.calculateExtent = calculateExtent;
nm.calculateExtent = calculateExtent;
/**
 * given one or an array of layers, fit to the map
 * @param layers - array of layers or single
 * @param  mp - the map to fit
 * @param [zoomOut=undefined] - levels to zoom out after fit
 */
function fitToMap(layers, mp, zoomOut) {
    "use strict";
    var ext = calculateExtent(layers);
    if (typeof ext == 'undefined') {
        return;
    }
    mp.getView().fit(ext, mp.getSize());
    if (typeof zoomOut == 'number') {
        mp.getView().setZoom(mp.getView().getZoom() - zoomOut);
    }
}
exports.fitToMap = fitToMap;
nm.calculateExtent = calculateExtent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW50VXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbEhlbHBlcnMvZXh0ZW50VXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7QUFDSCwyQ0FBc0M7QUFLdEMsSUFBTSxFQUFFLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQjs7OztHQUlHO0FBQ0gseUJBQWdDLE1BQTJDO0lBQ3ZFLFlBQVksQ0FBQztJQUViLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUV0QixJQUFJLElBQUksR0FBRyxNQUFNLENBQUM7SUFDbEIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ2xCLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ25CLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBRW5CLEdBQUcsQ0FBQyxDQUFZLFVBQU0sRUFBTixpQkFBTSxFQUFOLG9CQUFNLEVBQU4sSUFBTTtRQUFqQixJQUFJLEdBQUcsZUFBQTtRQUVSOzs7V0FHRztRQUNILElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUM7UUFHcEMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQzFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDckMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUNyQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3JDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDekMsQ0FBQztLQUNKO0lBRUQsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNaLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUM7QUFsQ0QsMENBa0NDO0FBRUQsRUFBRSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFHckM7Ozs7O0dBS0c7QUFDSCxrQkFBeUIsTUFBMkMsRUFBRSxFQUFVLEVBQUUsT0FBZ0I7SUFDOUYsWUFBWSxDQUFDO0lBRWIsSUFBSSxHQUFHLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxDQUFBLENBQUM7UUFDM0IsTUFBTSxDQUFDO0lBQ1gsQ0FBQztJQUVELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBZ0IsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQSxDQUFDO1FBQzVCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7QUFDTCxDQUFDO0FBZEQsNEJBY0M7QUFFRCxFQUFFLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDcvMTgvMjAxNi5cclxuICovXHJcbmltcG9ydCBwcm92aWRlIGZyb20gJy4uL3V0aWwvcHJvdmlkZSc7XHJcbmltcG9ydCBvbCA9IHJlcXVpcmUoJ2N1c3RvbS1vbCcpO1xyXG5pbXBvcnQge0xheWVyQmFzZVZlY3Rvcn0gZnJvbSBcIi4uL2xheWVycy9MYXllckJhc2VWZWN0b3JcIjtcclxuXHJcblxyXG5jb25zdCBubSA9IHByb3ZpZGUoJ3V0aWwnKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5PExheWVyQmFzZVZlY3Rvcj58QXJyYXk8b2wubGF5ZXIuVmVjdG9yPnxMYXllckJhc2VWZWN0b3J8b2wubGF5ZXIuVmVjdG9yfCp9IGxheWVycyAtIGFycmF5IG9mIGxheWVycyBvciBzaW5nbGVcclxuICogQHJldHVybnMge29sLkV4dGVudHxBcnJheTxudW1iZXI+fCp9IC0gY29sbGVjdGl2ZSBleHRlbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVFeHRlbnQobGF5ZXJzOiBvbC5sYXllci5WZWN0b3JbXXxMYXllckJhc2VWZWN0b3JbXSk6IG9sLkV4dGVudHxBcnJheTxudW1iZXI+fCBvbC5FeHRlbnR8IG51bWJlcltdIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGxldCBoYXNFeHRlbnQgPSBmYWxzZTtcclxuXHJcbiAgICBsZXQgbWluWCA9IDEwRTEwMDtcclxuICAgIGxldCBtaW5ZID0gMTBFMTAwO1xyXG4gICAgbGV0IG1heFggPSAtMTBFMTAwO1xyXG4gICAgbGV0IG1heFkgPSAtMTBFMTAwO1xyXG5cclxuICAgIGZvciAobGV0IGx5ciBvZiBsYXllcnMpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICogQHR5cGUge29sLmxheWVyLlZlY3Rvcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZXQgb2xMYXllciA9IGx5clsnb2xMYXllciddIHx8IGx5cjtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBpZiAob2xMYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaGFzRXh0ZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IGV4dCA9IG9sTGF5ZXIuZ2V0U291cmNlKCkuZ2V0RXh0ZW50KCk7XHJcbiAgICAgICAgICAgIG1pblggPSBleHRbMF0gPCBtaW5YID8gZXh0WzBdIDogbWluWDtcclxuICAgICAgICAgICAgbWluWSA9IGV4dFsxXSA8IG1pblkgPyBleHRbMV0gOiBtaW5ZO1xyXG4gICAgICAgICAgICBtYXhYID0gZXh0WzJdID4gbWF4WCA/IGV4dFsyXSA6IG1heFg7XHJcbiAgICAgICAgICAgIG1heFkgPSBleHRbM10gPiBtYXhZID8gZXh0WzNdIDogbWF4WTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGhhc0V4dGVudCkge1xyXG4gICAgICAgIHJldHVybiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbm5tLmNhbGN1bGF0ZUV4dGVudCA9IGNhbGN1bGF0ZUV4dGVudDtcclxuIFxyXG5cclxuLyoqXHJcbiAqIGdpdmVuIG9uZSBvciBhbiBhcnJheSBvZiBsYXllcnMsIGZpdCB0byB0aGUgbWFwXHJcbiAqIEBwYXJhbSBsYXllcnMgLSBhcnJheSBvZiBsYXllcnMgb3Igc2luZ2xlXHJcbiAqIEBwYXJhbSAgbXAgLSB0aGUgbWFwIHRvIGZpdFxyXG4gKiBAcGFyYW0gW3pvb21PdXQ9dW5kZWZpbmVkXSAtIGxldmVscyB0byB6b29tIG91dCBhZnRlciBmaXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaXRUb01hcChsYXllcnM6IG9sLmxheWVyLlZlY3RvcltdfExheWVyQmFzZVZlY3RvcltdLCBtcDogb2wuTWFwLCB6b29tT3V0PzogbnVtYmVyKXtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGxldCBleHQgPSBjYWxjdWxhdGVFeHRlbnQobGF5ZXJzKTtcclxuICAgIFxyXG4gICAgaWYgKHR5cGVvZiBleHQgPT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbXAuZ2V0VmlldygpLmZpdChleHQgYXMgb2wuRXh0ZW50LCBtcC5nZXRTaXplKCkpO1xyXG4gICAgXHJcbiAgICBpZiAodHlwZW9mIHpvb21PdXQgPT0gJ251bWJlcicpe1xyXG4gICAgICAgIG1wLmdldFZpZXcoKS5zZXRab29tKG1wLmdldFZpZXcoKS5nZXRab29tKCkgLSB6b29tT3V0KTtcclxuICAgIH1cclxufVxyXG5cclxubm0uY2FsY3VsYXRlRXh0ZW50ID0gY2FsY3VsYXRlRXh0ZW50O1xyXG4iXX0=