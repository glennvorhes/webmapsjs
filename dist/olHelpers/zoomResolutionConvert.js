/**
 * Created by gavorhes on 12/14/2015.
 */
"use strict";
var provide_1 = require("../util/provide");
var nm = provide_1.default('olHelpers.zoomResolutionConvert');
var _zoomResLookup = [
    156543.03392804097,
    78271.51696402048,
    39135.75848201024,
    19567.87924100512,
    9783.93962050256,
    4891.96981025128,
    2445.98490512564,
    1222.99245256282,
    611.49622628141,
    305.748113140705,
    152.8740565703525,
    76.43702828517625,
    38.21851414258813,
    19.109257071294063,
    9.554628535647032,
    4.777314267823516,
    2.388657133911758,
    1.194328566955879,
    0.5971642834779395,
    0.29858214173896974,
    0.14929107086948487,
    0.07464553543474244,
    0.03732276771737122,
    0.01866138385868561,
    0.009330691929342804,
    0.004665345964671402,
    0.002332672982335701,
    0.0011663364911678506,
    0.0005831682455839253 //28
];
/**
 * Get the resolution given the zoom level
 * @param {number} zoomLevel - the zoom level
 * @returns {number|*} the map resolution
 */
function zoomToResolution(zoomLevel) {
    "use strict";
    if (typeof zoomLevel == 'number') {
        if (zoomLevel % 1 === 0 && zoomLevel >= 0 && zoomLevel <= 28) {
            return _zoomResLookup[zoomLevel];
        }
        else {
            console.log("invalid zoom level provided: " + zoomLevel);
            return undefined;
        }
    }
    else {
        return undefined;
    }
}
exports.zoomToResolution = zoomToResolution;
nm.zoomToResolution = zoomToResolution;
/**
 * Get resolution from the zoom level
 * @param {number} resolution - the resolution
 * @returns {number|*} the zoom level
 */
function resolutionToZoom(resolution) {
    for (var i = 0; i < _zoomResLookup.length; i++) {
        if (resolution >= _zoomResLookup[i]) {
            return i;
        }
    }
    return 0;
}
exports.resolutionToZoom = resolutionToZoom;
nm.resolutionToZoom = resolutionToZoom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9vbVJlc29sdXRpb25Db252ZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL29sSGVscGVycy96b29tUmVzb2x1dGlvbkNvbnZlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7O0FBRUgsMkNBQXNDO0FBQ3RDLElBQU0sRUFBRSxHQUFHLGlCQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUV0RCxJQUFJLGNBQWMsR0FBRztJQUNqQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLG9CQUFvQjtJQUNwQixxQkFBcUI7SUFDckIscUJBQXFCLENBQUMsSUFBSTtDQUM3QixDQUFDO0FBRUY7Ozs7R0FJRztBQUNILDBCQUFpQyxTQUFTO0lBQ3RDLFlBQVksQ0FBQztJQUViLEVBQUUsQ0FBQyxDQUFDLE9BQU8sU0FBUyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0IsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxJQUFJLENBQUMsSUFBSSxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWdDLFNBQVcsQ0FBQyxDQUFDO1lBRXpELE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUM7QUFkRCw0Q0FjQztBQUNELEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUd2Qzs7OztHQUlHO0FBQ0gsMEJBQWlDLFVBQVU7SUFDdkMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLENBQUM7UUFDNUMsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFBLENBQUM7WUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUM7QUFSRCw0Q0FRQztBQUVELEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDEyLzE0LzIwMTUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHByb3ZpZGUgZnJvbSAnLi4vdXRpbC9wcm92aWRlJztcclxuY29uc3Qgbm0gPSBwcm92aWRlKCdvbEhlbHBlcnMuem9vbVJlc29sdXRpb25Db252ZXJ0Jyk7XHJcblxyXG5sZXQgX3pvb21SZXNMb29rdXAgPSBbXHJcbiAgICAxNTY1NDMuMDMzOTI4MDQwOTcsIC8vMFxyXG4gICAgNzgyNzEuNTE2OTY0MDIwNDgsIC8vMVxyXG4gICAgMzkxMzUuNzU4NDgyMDEwMjQsIC8vMlxyXG4gICAgMTk1NjcuODc5MjQxMDA1MTIsIC8vM1xyXG4gICAgOTc4My45Mzk2MjA1MDI1NiwgLy80XHJcbiAgICA0ODkxLjk2OTgxMDI1MTI4LCAvLzVcclxuICAgIDI0NDUuOTg0OTA1MTI1NjQsIC8vNlxyXG4gICAgMTIyMi45OTI0NTI1NjI4MiwgLy83XHJcbiAgICA2MTEuNDk2MjI2MjgxNDEsIC8vOFxyXG4gICAgMzA1Ljc0ODExMzE0MDcwNSwgLy85XHJcbiAgICAxNTIuODc0MDU2NTcwMzUyNSwgLy8xMFxyXG4gICAgNzYuNDM3MDI4Mjg1MTc2MjUsIC8vMTFcclxuICAgIDM4LjIxODUxNDE0MjU4ODEzLCAvLzEyXHJcbiAgICAxOS4xMDkyNTcwNzEyOTQwNjMsIC8vMTNcclxuICAgIDkuNTU0NjI4NTM1NjQ3MDMyLCAvLzE0XHJcbiAgICA0Ljc3NzMxNDI2NzgyMzUxNiwgLy8xNVxyXG4gICAgMi4zODg2NTcxMzM5MTE3NTgsIC8vMTZcclxuICAgIDEuMTk0MzI4NTY2OTU1ODc5LCAvLzE3XHJcbiAgICAwLjU5NzE2NDI4MzQ3NzkzOTUsIC8vMThcclxuICAgIDAuMjk4NTgyMTQxNzM4OTY5NzQsIC8vMTlcclxuICAgIDAuMTQ5MjkxMDcwODY5NDg0ODcsIC8vMjBcclxuICAgIDAuMDc0NjQ1NTM1NDM0NzQyNDQsIC8vMjFcclxuICAgIDAuMDM3MzIyNzY3NzE3MzcxMjIsIC8vMjJcclxuICAgIDAuMDE4NjYxMzgzODU4Njg1NjEsIC8vMjNcclxuICAgIDAuMDA5MzMwNjkxOTI5MzQyODA0LCAvLzI0XHJcbiAgICAwLjAwNDY2NTM0NTk2NDY3MTQwMiwgLy8yNVxyXG4gICAgMC4wMDIzMzI2NzI5ODIzMzU3MDEsIC8vMjZcclxuICAgIDAuMDAxMTY2MzM2NDkxMTY3ODUwNiwgLy8yN1xyXG4gICAgMC4wMDA1ODMxNjgyNDU1ODM5MjUzIC8vMjhcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIHJlc29sdXRpb24gZ2l2ZW4gdGhlIHpvb20gbGV2ZWxcclxuICogQHBhcmFtIHtudW1iZXJ9IHpvb21MZXZlbCAtIHRoZSB6b29tIGxldmVsXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ8Kn0gdGhlIG1hcCByZXNvbHV0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gem9vbVRvUmVzb2x1dGlvbih6b29tTGV2ZWwpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygem9vbUxldmVsID09ICdudW1iZXInKSB7XHJcbiAgICAgICAgaWYgKHpvb21MZXZlbCAlIDEgPT09IDAgJiYgem9vbUxldmVsID49IDAgJiYgem9vbUxldmVsIDw9IDI4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfem9vbVJlc0xvb2t1cFt6b29tTGV2ZWxdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBpbnZhbGlkIHpvb20gbGV2ZWwgcHJvdmlkZWQ6ICR7em9vbUxldmVsfWApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxubm0uem9vbVRvUmVzb2x1dGlvbiA9IHpvb21Ub1Jlc29sdXRpb247XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldCByZXNvbHV0aW9uIGZyb20gdGhlIHpvb20gbGV2ZWxcclxuICogQHBhcmFtIHtudW1iZXJ9IHJlc29sdXRpb24gLSB0aGUgcmVzb2x1dGlvblxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfCp9IHRoZSB6b29tIGxldmVsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x1dGlvblRvWm9vbShyZXNvbHV0aW9uKXtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3pvb21SZXNMb29rdXAubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGlmIChyZXNvbHV0aW9uID49IF96b29tUmVzTG9va3VwW2ldICl7XHJcbiAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gMDtcclxufVxyXG5cclxubm0ucmVzb2x1dGlvblRvWm9vbSA9IHJlc29sdXRpb25Ub1pvb207XHJcbiJdfQ==