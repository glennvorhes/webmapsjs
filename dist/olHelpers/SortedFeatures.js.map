{"version":3,"file":"SortedFeatures.js","sourceRoot":"C:/Users/glenn/PycharmProjects/webmapsjs/src/","sources":["olHelpers/SortedFeatures.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by gavorhes on 12/23/2015.\r\n */\r\nimport provide from '../util/provide';\r\nimport ol = require('custom-ol');\r\nlet nm = provide('olHelpers');\r\n\r\n/**\r\n * take an array of features and sort by a given property name\r\n */\r\nclass SortedFeatures {\r\n    sortedFeatures: Array<ol.Feature>;\r\n    propertyName: string;\r\n    _propertyType: string;\r\n\r\n    /**\r\n     *\r\n     * @param {Array<ol.Feature>} features array of ol features\r\n     * @param {string} propertyName - the property name to use for lookup\r\n     */\r\n    constructor(features, propertyName) {\r\n        this.sortedFeatures = features;\r\n        this.propertyName = propertyName;\r\n\r\n        if (this.sortedFeatures.length > 0) {\r\n            this._propertyType = typeof this.sortedFeatures[0].getProperties()[this.propertyName];\r\n\r\n            let __this = this;\r\n            this.sortedFeatures.sort(function (a, b) : number {\r\n                if (__this._propertyType == 'number'){\r\n                    let aMinusB = a['getProperties']()[__this.propertyName] - b['getProperties']()[__this.propertyName];\r\n                    if (aMinusB == 0){\r\n                        return 0;\r\n                    } else {\r\n                        return aMinusB > 0 ? 1 : -1;\r\n                    }\r\n                } else if (__this._propertyType == 'string'){\r\n                    let propA = a['getProperties']()[__this.propertyName] || '';\r\n                    let propB = b['getProperties']()[__this.propertyName] || '';\r\n                    propA = propA.toString().trim();\r\n                    propB = propB.toString().trim();\r\n\r\n                    if (propA == propB){\r\n                        return 0;\r\n                    } else {\r\n                        return propA > propB ? 1 : 0;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * recursive search to find the value\r\n     * @param {number|string} propertyValue - the property value to search for\r\n     * @param {boolean} [exactMatch=false] if only an exact match should be returned\r\n     * @param {Array} [sortedFeatures=this.sortedFeatures] - the candidate features\r\n     * @returns {ol.Feature|undefined} the feature matching the lookup\r\n     */\r\n    getFeature(propertyValue, exactMatch: boolean = false, sortedFeatures? :Array<ol.Feature>): ol.Feature {\r\n        if (typeof sortedFeatures == 'undefined'){\r\n            sortedFeatures = this.sortedFeatures;\r\n        }\r\n\r\n\r\n        if (sortedFeatures.length == 0){\r\n            return undefined;\r\n        }\r\n\r\n        if (sortedFeatures.length == 1){\r\n            if (exactMatch){\r\n                if (sortedFeatures[0].getProperties()[this.propertyName] == propertyValue){\r\n                    return sortedFeatures[0];\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            } else {\r\n                return sortedFeatures[0];\r\n            }\r\n        }\r\n\r\n        let lowProp = sortedFeatures[0].getProperties()[this.propertyName];\r\n        let highProp = sortedFeatures[sortedFeatures.length - 1].getProperties()[this.propertyName];\r\n\r\n        if (exactMatch){\r\n            if (lowProp == propertyValue){\r\n                return sortedFeatures[0];\r\n            } else if (propertyValue < lowProp){\r\n                return undefined;\r\n            } else if (highProp == propertyValue){\r\n                return sortedFeatures[sortedFeatures.length - 1];\r\n            } else if (propertyValue >  highProp){\r\n                return undefined;\r\n            }\r\n        } else {\r\n            if (propertyValue <= lowProp){\r\n                return sortedFeatures[0];\r\n            } else if (propertyValue >= highProp){\r\n                return sortedFeatures[sortedFeatures.length - 1];\r\n            }\r\n        }\r\n\r\n        let midIndex = Math.floor(sortedFeatures.length / 2);\r\n        let midFeature = sortedFeatures[midIndex];\r\n        let midProperty = midFeature.getProperties()[this.propertyName];\r\n\r\n        if (midProperty ===  propertyValue){\r\n            return midFeature;\r\n        }\r\n\r\n        if (propertyValue < midProperty){\r\n            return this.getFeature(propertyValue, exactMatch, sortedFeatures.slice(0, midIndex));\r\n        } else {\r\n            return this.getFeature(propertyValue, exactMatch, sortedFeatures.slice(midIndex));\r\n        }\r\n    }\r\n}\r\n\r\nnm.SortedFeatures = SortedFeatures;\r\nexport default SortedFeatures;\r\n\r\n"]}