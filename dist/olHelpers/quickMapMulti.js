/**
 * Created by gavorhes on 12/15/2015.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var quickMapBase_1 = require("./quickMapBase");
var provide_1 = require("../util/provide");
var mapMoveCls_1 = require("./mapMoveCls");
var mapPopupCls_1 = require("./mapPopupCls");
var nm = provide_1.default('olHelpers');
/**
 * @typedef {object} quickMapMultiReturn
 * @property {ol.Map} map The X Coordinate
 * @property {MapMoveCls} mapMove The Y Coordinate
 * @property {MapPopupCls} mapPopup The Y Coordinate
 */
/**
 * Sets up a map with some default parameters and initializes
 * mapMove and mapPopup
 *
 * @param {object} [options={}] config options
 * @param {string} [options.divId=map] map div id
 * @param {object} [options.center={}] center config object
 * @param {number} [options.center.x=-10018378] center x, web mercator x or lon
 * @param {number} [options.center.y=5574910] center y, web mercator y or lat
 * @param {number} [options.zoom=7] zoom level
 * @param {number} [options.minZoom=undefined] min zoom
 * @param {number} [options.maxZoom=undefined] max zoom
 * @param {boolean} [options.baseSwitcher=true] if add base map switcher
 * @param {boolean} [options.fullScreen=false] if add base map switcher
 * @returns return object with map, map move, and map popup objects
 */
function quickMapMulti(options) {
    var m = quickMapBase_1.quickMapBase(options);
    var mov = new mapMoveCls_1.default();
    var pop = new mapPopupCls_1.default();
    mov.init(m);
    pop.init(m);
    return { map: m, mapMove: mov, mapPopup: pop };
}
nm.quickMapMulti = quickMapMulti;
exports.default = quickMapMulti;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tNYXBNdWx0aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbEhlbHBlcnMvcXVpY2tNYXBNdWx0aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRzs7O0FBRUgsK0NBQTZEO0FBQzdELDJDQUFzQztBQUN0QywyQ0FBc0M7QUFDdEMsNkNBQXdDO0FBRXhDLElBQUksRUFBRSxHQUFHLGlCQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFHOUI7Ozs7O0dBS0c7QUFFSDs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCx1QkFBdUIsT0FBd0I7SUFDM0MsSUFBSSxDQUFDLEdBQUcsMkJBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixJQUFJLEdBQUcsR0FBRyxJQUFJLG9CQUFVLEVBQUUsQ0FBQztJQUMzQixJQUFJLEdBQUcsR0FBRyxJQUFJLHFCQUFXLEVBQUUsQ0FBQztJQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVaLE1BQU0sQ0FBQyxFQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELEVBQUUsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ2pDLGtCQUFlLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDEyLzE1LzIwMTUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtxdWlja01hcEJhc2UsIHF1aWNrTWFwT3B0aW9uc30gZnJvbSAnLi9xdWlja01hcEJhc2UnO1xyXG5pbXBvcnQgcHJvdmlkZSBmcm9tICcuLi91dGlsL3Byb3ZpZGUnO1xyXG5pbXBvcnQgTWFwTW92ZUNscyBmcm9tICcuL21hcE1vdmVDbHMnO1xyXG5pbXBvcnQgTWFwUG9wdXBDbHMgZnJvbSAnLi9tYXBQb3B1cENscyc7XHJcbmltcG9ydCBvbCA9IHJlcXVpcmUoJ2N1c3RvbS1vbCcpO1xyXG5sZXQgbm0gPSBwcm92aWRlKCdvbEhlbHBlcnMnKTtcclxuXHJcblxyXG4vKipcclxuICogQHR5cGVkZWYge29iamVjdH0gcXVpY2tNYXBNdWx0aVJldHVyblxyXG4gKiBAcHJvcGVydHkge29sLk1hcH0gbWFwIFRoZSBYIENvb3JkaW5hdGVcclxuICogQHByb3BlcnR5IHtNYXBNb3ZlQ2xzfSBtYXBNb3ZlIFRoZSBZIENvb3JkaW5hdGVcclxuICogQHByb3BlcnR5IHtNYXBQb3B1cENsc30gbWFwUG9wdXAgVGhlIFkgQ29vcmRpbmF0ZVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBTZXRzIHVwIGEgbWFwIHdpdGggc29tZSBkZWZhdWx0IHBhcmFtZXRlcnMgYW5kIGluaXRpYWxpemVzXHJcbiAqIG1hcE1vdmUgYW5kIG1hcFBvcHVwXHJcbiAqXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gY29uZmlnIG9wdGlvbnNcclxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmRpdklkPW1hcF0gbWFwIGRpdiBpZFxyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY2VudGVyPXt9XSBjZW50ZXIgY29uZmlnIG9iamVjdFxyXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2VudGVyLng9LTEwMDE4Mzc4XSBjZW50ZXIgeCwgd2ViIG1lcmNhdG9yIHggb3IgbG9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jZW50ZXIueT01NTc0OTEwXSBjZW50ZXIgeSwgd2ViIG1lcmNhdG9yIHkgb3IgbGF0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy56b29tPTddIHpvb20gbGV2ZWxcclxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pblpvb209dW5kZWZpbmVkXSBtaW4gem9vbVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Wm9vbT11bmRlZmluZWRdIG1heCB6b29tXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYmFzZVN3aXRjaGVyPXRydWVdIGlmIGFkZCBiYXNlIG1hcCBzd2l0Y2hlclxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZ1bGxTY3JlZW49ZmFsc2VdIGlmIGFkZCBiYXNlIG1hcCBzd2l0Y2hlclxyXG4gKiBAcmV0dXJucyByZXR1cm4gb2JqZWN0IHdpdGggbWFwLCBtYXAgbW92ZSwgYW5kIG1hcCBwb3B1cCBvYmplY3RzXHJcbiAqL1xyXG5mdW5jdGlvbiBxdWlja01hcE11bHRpKG9wdGlvbnM6IHF1aWNrTWFwT3B0aW9ucyk6IHttYXA6IG9sLk1hcCwgbWFwTW92ZTogTWFwTW92ZUNscywgbWFwUG9wdXA6IE1hcFBvcHVwQ2xzfSB7XHJcbiAgICBsZXQgbSA9IHF1aWNrTWFwQmFzZShvcHRpb25zKTtcclxuICAgIGxldCBtb3YgPSBuZXcgTWFwTW92ZUNscygpO1xyXG4gICAgbGV0IHBvcCA9IG5ldyBNYXBQb3B1cENscygpO1xyXG4gICAgbW92LmluaXQobSk7XHJcbiAgICBwb3AuaW5pdChtKTtcclxuXHJcbiAgICByZXR1cm4ge21hcDogbSwgbWFwTW92ZTogbW92LCBtYXBQb3B1cDogcG9wfTtcclxufVxyXG5cclxubm0ucXVpY2tNYXBNdWx0aSA9IHF1aWNrTWFwTXVsdGk7XHJcbmV4cG9ydCBkZWZhdWx0IHF1aWNrTWFwTXVsdGk7XHJcbiJdfQ==