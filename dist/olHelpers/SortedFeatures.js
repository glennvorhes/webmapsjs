"use strict";
/**
 * Created by gavorhes on 12/23/2015.
 */
var provide_1 = require("../util/provide");
var nm = provide_1.default('olHelpers');
/**
 * take an array of features and sort by a given property name
 */
var SortedFeatures = (function () {
    /**
     *
     * @param {Array<ol.Feature>} features array of ol features
     * @param {string} propertyName - the property name to use for lookup
     */
    function SortedFeatures(features, propertyName) {
        this.sortedFeatures = features;
        this.propertyName = propertyName;
        if (this.sortedFeatures.length > 0) {
            this._propertyType = typeof this.sortedFeatures[0].getProperties()[this.propertyName];
            var __this_1 = this;
            this.sortedFeatures.sort(function (a, b) {
                if (__this_1._propertyType == 'number') {
                    var aMinusB = a['getProperties']()[__this_1.propertyName] - b['getProperties']()[__this_1.propertyName];
                    if (aMinusB == 0) {
                        return 0;
                    }
                    else {
                        return aMinusB > 0 ? 1 : -1;
                    }
                }
                else if (__this_1._propertyType == 'string') {
                    var propA = a['getProperties']()[__this_1.propertyName] || '';
                    var propB = b['getProperties']()[__this_1.propertyName] || '';
                    propA = propA.toString().trim();
                    propB = propB.toString().trim();
                    if (propA == propB) {
                        return 0;
                    }
                    else {
                        return propA > propB ? 1 : 0;
                    }
                }
            });
        }
    }
    /**
     * recursive search to find the value
     * @param {number|string} propertyValue - the property value to search for
     * @param {boolean} [exactMatch=false] if only an exact match should be returned
     * @param {Array} [sortedFeatures=this.sortedFeatures] - the candidate features
     * @returns {ol.Feature|undefined} the feature matching the lookup
     */
    SortedFeatures.prototype.getFeature = function (propertyValue, exactMatch, sortedFeatures) {
        if (exactMatch === void 0) { exactMatch = false; }
        if (typeof sortedFeatures == 'undefined') {
            sortedFeatures = this.sortedFeatures;
        }
        if (sortedFeatures.length == 0) {
            return undefined;
        }
        if (sortedFeatures.length == 1) {
            if (exactMatch) {
                if (sortedFeatures[0].getProperties()[this.propertyName] == propertyValue) {
                    return sortedFeatures[0];
                }
                else {
                    return undefined;
                }
            }
            else {
                return sortedFeatures[0];
            }
        }
        var lowProp = sortedFeatures[0].getProperties()[this.propertyName];
        var highProp = sortedFeatures[sortedFeatures.length - 1].getProperties()[this.propertyName];
        if (exactMatch) {
            if (lowProp == propertyValue) {
                return sortedFeatures[0];
            }
            else if (propertyValue < lowProp) {
                return undefined;
            }
            else if (highProp == propertyValue) {
                return sortedFeatures[sortedFeatures.length - 1];
            }
            else if (propertyValue > highProp) {
                return undefined;
            }
        }
        else {
            if (propertyValue <= lowProp) {
                return sortedFeatures[0];
            }
            else if (propertyValue >= highProp) {
                return sortedFeatures[sortedFeatures.length - 1];
            }
        }
        var midIndex = Math.floor(sortedFeatures.length / 2);
        var midFeature = sortedFeatures[midIndex];
        var midProperty = midFeature.getProperties()[this.propertyName];
        if (midProperty === propertyValue) {
            return midFeature;
        }
        if (propertyValue < midProperty) {
            return this.getFeature(propertyValue, exactMatch, sortedFeatures.slice(0, midIndex));
        }
        else {
            return this.getFeature(propertyValue, exactMatch, sortedFeatures.slice(midIndex));
        }
    };
    return SortedFeatures;
}());
nm.SortedFeatures = SortedFeatures;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SortedFeatures;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU29ydGVkRmVhdHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb2xIZWxwZXJzL1NvcnRlZEZlYXR1cmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRztBQUNILDJDQUFzQztBQUV0QyxJQUFJLEVBQUUsR0FBRyxpQkFBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRTlCOztHQUVHO0FBQ0g7SUFLSTs7OztPQUlHO0lBQ0gsd0JBQVksUUFBUSxFQUFFLFlBQVk7UUFDOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFFakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFdEYsSUFBSSxRQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7Z0JBQ25DLEVBQUUsQ0FBQyxDQUFDLFFBQU0sQ0FBQyxhQUFhLElBQUksUUFBUSxDQUFDLENBQUEsQ0FBQztvQkFDbEMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsUUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFFBQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDcEcsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7d0JBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDYixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDaEMsQ0FBQztnQkFDTCxDQUFDO2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFNLENBQUMsYUFBYSxJQUFJLFFBQVEsQ0FBQyxDQUFBLENBQUM7b0JBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFFBQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzVELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLFFBQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzVELEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2hDLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBRWhDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQSxDQUFDO3dCQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNiLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDakMsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILG1DQUFVLEdBQVYsVUFBVyxhQUFhLEVBQUUsVUFBMkIsRUFBRSxjQUFrQztRQUEvRCwyQkFBQSxFQUFBLGtCQUEyQjtRQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLGNBQWMsSUFBSSxXQUFXLENBQUMsQ0FBQSxDQUFDO1lBQ3RDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ3pDLENBQUM7UUFHRCxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNyQixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzVCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUM7Z0JBQ1osRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQSxDQUFDO29CQUN2RSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ3JCLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixDQUFDO1FBQ0wsQ0FBQztRQUVELElBQUksT0FBTyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbkUsSUFBSSxRQUFRLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTVGLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUM7WUFDWixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDLENBQUEsQ0FBQztnQkFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQSxDQUFDO2dCQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3JCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxJQUFJLGFBQWEsQ0FBQyxDQUFBLENBQUM7Z0JBQ2xDLE1BQU0sQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsR0FBSSxRQUFRLENBQUMsQ0FBQSxDQUFDO2dCQUNsQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ3JCLENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixFQUFFLENBQUMsQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLENBQUEsQ0FBQztnQkFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsSUFBSSxRQUFRLENBQUMsQ0FBQSxDQUFDO2dCQUNsQyxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxVQUFVLEdBQUcsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEUsRUFBRSxDQUFDLENBQUMsV0FBVyxLQUFNLGFBQWEsQ0FBQyxDQUFBLENBQUM7WUFDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUN0QixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxDQUFBLENBQUM7WUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLENBQUM7SUFDTCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBMUdELElBMEdDO0FBRUQsRUFBRSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7O0FBQ25DLGtCQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGdhdm9yaGVzIG9uIDEyLzIzLzIwMTUuXHJcbiAqL1xyXG5pbXBvcnQgcHJvdmlkZSBmcm9tICcuLi91dGlsL3Byb3ZpZGUnO1xyXG5pbXBvcnQgb2wgPSByZXF1aXJlKCdjdXN0b20tb2wnKTtcclxubGV0IG5tID0gcHJvdmlkZSgnb2xIZWxwZXJzJyk7XHJcblxyXG4vKipcclxuICogdGFrZSBhbiBhcnJheSBvZiBmZWF0dXJlcyBhbmQgc29ydCBieSBhIGdpdmVuIHByb3BlcnR5IG5hbWVcclxuICovXHJcbmNsYXNzIFNvcnRlZEZlYXR1cmVzIHtcclxuICAgIHNvcnRlZEZlYXR1cmVzOiBBcnJheTxvbC5GZWF0dXJlPjtcclxuICAgIHByb3BlcnR5TmFtZTogc3RyaW5nO1xyXG4gICAgX3Byb3BlcnR5VHlwZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXJyYXk8b2wuRmVhdHVyZT59IGZlYXR1cmVzIGFycmF5IG9mIG9sIGZlYXR1cmVzXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlOYW1lIC0gdGhlIHByb3BlcnR5IG5hbWUgdG8gdXNlIGZvciBsb29rdXBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZmVhdHVyZXMsIHByb3BlcnR5TmFtZSkge1xyXG4gICAgICAgIHRoaXMuc29ydGVkRmVhdHVyZXMgPSBmZWF0dXJlcztcclxuICAgICAgICB0aGlzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc29ydGVkRmVhdHVyZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0eVR5cGUgPSB0eXBlb2YgdGhpcy5zb3J0ZWRGZWF0dXJlc1swXS5nZXRQcm9wZXJ0aWVzKClbdGhpcy5wcm9wZXJ0eU5hbWVdO1xyXG5cclxuICAgICAgICAgICAgbGV0IF9fdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydGVkRmVhdHVyZXMuc29ydChmdW5jdGlvbiAoYSwgYikgOiBudW1iZXIge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9fdGhpcy5fcHJvcGVydHlUeXBlID09ICdudW1iZXInKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYU1pbnVzQiA9IGFbJ2dldFByb3BlcnRpZXMnXSgpW19fdGhpcy5wcm9wZXJ0eU5hbWVdIC0gYlsnZ2V0UHJvcGVydGllcyddKClbX190aGlzLnByb3BlcnR5TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFNaW51c0IgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhTWludXNCID4gMCA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9fdGhpcy5fcHJvcGVydHlUeXBlID09ICdzdHJpbmcnKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcEEgPSBhWydnZXRQcm9wZXJ0aWVzJ10oKVtfX3RoaXMucHJvcGVydHlOYW1lXSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvcEIgPSBiWydnZXRQcm9wZXJ0aWVzJ10oKVtfX3RoaXMucHJvcGVydHlOYW1lXSB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICBwcm9wQSA9IHByb3BBLnRvU3RyaW5nKCkudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BCID0gcHJvcEIudG9TdHJpbmcoKS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wQSA9PSBwcm9wQil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wQSA+IHByb3BCID8gMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZWN1cnNpdmUgc2VhcmNoIHRvIGZpbmQgdGhlIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHByb3BlcnR5VmFsdWUgLSB0aGUgcHJvcGVydHkgdmFsdWUgdG8gc2VhcmNoIGZvclxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZXhhY3RNYXRjaD1mYWxzZV0gaWYgb25seSBhbiBleGFjdCBtYXRjaCBzaG91bGQgYmUgcmV0dXJuZWRcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzb3J0ZWRGZWF0dXJlcz10aGlzLnNvcnRlZEZlYXR1cmVzXSAtIHRoZSBjYW5kaWRhdGUgZmVhdHVyZXNcclxuICAgICAqIEByZXR1cm5zIHtvbC5GZWF0dXJlfHVuZGVmaW5lZH0gdGhlIGZlYXR1cmUgbWF0Y2hpbmcgdGhlIGxvb2t1cFxyXG4gICAgICovXHJcbiAgICBnZXRGZWF0dXJlKHByb3BlcnR5VmFsdWUsIGV4YWN0TWF0Y2g6IGJvb2xlYW4gPSBmYWxzZSwgc29ydGVkRmVhdHVyZXM/IDpBcnJheTxvbC5GZWF0dXJlPikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc29ydGVkRmVhdHVyZXMgPT0gJ3VuZGVmaW5lZCcpe1xyXG4gICAgICAgICAgICBzb3J0ZWRGZWF0dXJlcyA9IHRoaXMuc29ydGVkRmVhdHVyZXM7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHNvcnRlZEZlYXR1cmVzLmxlbmd0aCA9PSAwKXtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzb3J0ZWRGZWF0dXJlcy5sZW5ndGggPT0gMSl7XHJcbiAgICAgICAgICAgIGlmIChleGFjdE1hdGNoKXtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRGZWF0dXJlc1swXS5nZXRQcm9wZXJ0aWVzKClbdGhpcy5wcm9wZXJ0eU5hbWVdID09IHByb3BlcnR5VmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRGZWF0dXJlc1swXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRGZWF0dXJlc1swXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxvd1Byb3AgPSBzb3J0ZWRGZWF0dXJlc1swXS5nZXRQcm9wZXJ0aWVzKClbdGhpcy5wcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgIGxldCBoaWdoUHJvcCA9IHNvcnRlZEZlYXR1cmVzW3NvcnRlZEZlYXR1cmVzLmxlbmd0aCAtIDFdLmdldFByb3BlcnRpZXMoKVt0aGlzLnByb3BlcnR5TmFtZV07XHJcblxyXG4gICAgICAgIGlmIChleGFjdE1hdGNoKXtcclxuICAgICAgICAgICAgaWYgKGxvd1Byb3AgPT0gcHJvcGVydHlWYWx1ZSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc29ydGVkRmVhdHVyZXNbMF07XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlWYWx1ZSA8IGxvd1Byb3Ape1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChoaWdoUHJvcCA9PSBwcm9wZXJ0eVZhbHVlKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRGZWF0dXJlc1tzb3J0ZWRGZWF0dXJlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eVZhbHVlID4gIGhpZ2hQcm9wKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocHJvcGVydHlWYWx1ZSA8PSBsb3dQcm9wKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRGZWF0dXJlc1swXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eVZhbHVlID49IGhpZ2hQcm9wKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRGZWF0dXJlc1tzb3J0ZWRGZWF0dXJlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1pZEluZGV4ID0gTWF0aC5mbG9vcihzb3J0ZWRGZWF0dXJlcy5sZW5ndGggLyAyKTtcclxuICAgICAgICBsZXQgbWlkRmVhdHVyZSA9IHNvcnRlZEZlYXR1cmVzW21pZEluZGV4XTtcclxuICAgICAgICBsZXQgbWlkUHJvcGVydHkgPSBtaWRGZWF0dXJlLmdldFByb3BlcnRpZXMoKVt0aGlzLnByb3BlcnR5TmFtZV07XHJcblxyXG4gICAgICAgIGlmIChtaWRQcm9wZXJ0eSA9PT0gIHByb3BlcnR5VmFsdWUpe1xyXG4gICAgICAgICAgICByZXR1cm4gbWlkRmVhdHVyZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlIDwgbWlkUHJvcGVydHkpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGZWF0dXJlKHByb3BlcnR5VmFsdWUsIGV4YWN0TWF0Y2gsIHNvcnRlZEZlYXR1cmVzLnNsaWNlKDAsIG1pZEluZGV4KSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmVhdHVyZShwcm9wZXJ0eVZhbHVlLCBleGFjdE1hdGNoLCBzb3J0ZWRGZWF0dXJlcy5zbGljZShtaWRJbmRleCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxubm0uU29ydGVkRmVhdHVyZXMgPSBTb3J0ZWRGZWF0dXJlcztcclxuZXhwb3J0IGRlZmF1bHQgU29ydGVkRmVhdHVyZXM7XHJcblxyXG4iXX0=